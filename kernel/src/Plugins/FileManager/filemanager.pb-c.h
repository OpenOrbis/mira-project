/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: external/filemanager.proto */

#ifndef PROTOBUF_C_external_2ffilemanager_2eproto__INCLUDED
#define PROTOBUF_C_external_2ffilemanager_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _FmEchoRequest FmEchoRequest;
typedef struct _FmOpenRequest FmOpenRequest;
typedef struct _FmCloseRequest FmCloseRequest;
typedef struct _FmSeekRequest FmSeekRequest;
typedef struct _FmReadRequest FmReadRequest;
typedef struct _FmReadResponse FmReadResponse;
typedef struct _FmWriteRequest FmWriteRequest;
typedef struct _FmDent FmDent;
typedef struct _FmGetDentsRequest FmGetDentsRequest;
typedef struct _FmGetDentsResponse FmGetDentsResponse;
typedef struct _FmTimespec FmTimespec;
typedef struct _FmStatRequest FmStatRequest;
typedef struct _FmStatResponse FmStatResponse;
typedef struct _FmMkdirRequest FmMkdirRequest;
typedef struct _FmRmdirRequest FmRmdirRequest;
typedef struct _FmUnlinkRequest FmUnlinkRequest;
typedef struct _FmDecryptSelfRequest FmDecryptSelfRequest;
typedef struct _FmDecryptSelfResponse FmDecryptSelfResponse;


/* --- enums --- */


/* --- messages --- */

struct  _FmEchoRequest
{
  ProtobufCMessage base;
  char *message;
};
#define FM_ECHO_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_echo_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _FmOpenRequest
{
  ProtobufCMessage base;
  int32_t flags;
  int32_t mode;
  char *path;
};
#define FM_OPEN_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_open_request__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string }


struct  _FmCloseRequest
{
  ProtobufCMessage base;
  int32_t handle;
};
#define FM_CLOSE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_close_request__descriptor) \
    , 0 }


struct  _FmSeekRequest
{
  ProtobufCMessage base;
  int32_t handle;
  int64_t offset;
};
#define FM_SEEK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_seek_request__descriptor) \
    , 0, 0 }


struct  _FmReadRequest
{
  ProtobufCMessage base;
  int32_t handle;
  uint64_t size;
};
#define FM_READ_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_read_request__descriptor) \
    , 0, 0 }


struct  _FmReadResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
};
#define FM_READ_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_read_response__descriptor) \
    , {0,NULL} }


struct  _FmWriteRequest
{
  ProtobufCMessage base;
  int32_t handle;
  ProtobufCBinaryData data;
};
#define FM_WRITE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_write_request__descriptor) \
    , 0, {0,NULL} }


struct  _FmDent
{
  ProtobufCMessage base;
  uint32_t fileno;
  uint32_t reclen;
  uint32_t type;
  char *name;
};
#define FM_DENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_dent__descriptor) \
    , 0, 0, 0, (char *)protobuf_c_empty_string }


struct  _FmGetDentsRequest
{
  ProtobufCMessage base;
  char *path;
};
#define FM_GET_DENTS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_get_dents_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _FmGetDentsResponse
{
  ProtobufCMessage base;
  size_t n_dents;
  FmDent **dents;
};
#define FM_GET_DENTS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_get_dents_response__descriptor) \
    , 0,NULL }


struct  _FmTimespec
{
  ProtobufCMessage base;
  int64_t tv_sec;
  int32_t tv_nsec;
};
#define FM_TIMESPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_timespec__descriptor) \
    , 0, 0 }


struct  _FmStatRequest
{
  ProtobufCMessage base;
  int32_t handle;
  char *path;
};
#define FM_STAT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_stat_request__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  _FmStatResponse
{
  ProtobufCMessage base;
  uint32_t st_dev;
  uint32_t st_ino;
  uint32_t st_mode;
  uint32_t st_nlink;
  uint32_t st_uid;
  uint32_t st_gid;
  uint32_t st_rdev;
  FmTimespec *st_atim;
  FmTimespec *st_mtim;
  FmTimespec *st_ctim;
  int64_t st_size;
  int64_t st_blocks;
  uint32_t st_blksize;
  uint32_t st_flags;
  uint32_t st_gen;
  int32_t st_lspare;
  FmTimespec *st_birthtim;
};
#define FM_STAT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_stat_response__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, NULL }


struct  _FmMkdirRequest
{
  ProtobufCMessage base;
  int32_t mode;
  char *path;
};
#define FM_MKDIR_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_mkdir_request__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  _FmRmdirRequest
{
  ProtobufCMessage base;
  char *path;
};
#define FM_RMDIR_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_rmdir_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _FmUnlinkRequest
{
  ProtobufCMessage base;
  char *path;
};
#define FM_UNLINK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_unlink_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _FmDecryptSelfRequest
{
  ProtobufCMessage base;
  char *path;
};
#define FM_DECRYPT_SELF_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_decrypt_self_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _FmDecryptSelfResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
};
#define FM_DECRYPT_SELF_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fm_decrypt_self_response__descriptor) \
    , {0,NULL} }


/* FmEchoRequest methods */
void   fm_echo_request__init
                     (FmEchoRequest         *message);
size_t fm_echo_request__get_packed_size
                     (const FmEchoRequest   *message);
size_t fm_echo_request__pack
                     (const FmEchoRequest   *message,
                      uint8_t             *out);
size_t fm_echo_request__pack_to_buffer
                     (const FmEchoRequest   *message,
                      ProtobufCBuffer     *buffer);
FmEchoRequest *
       fm_echo_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_echo_request__free_unpacked
                     (FmEchoRequest *message,
                      ProtobufCAllocator *allocator);
/* FmOpenRequest methods */
void   fm_open_request__init
                     (FmOpenRequest         *message);
size_t fm_open_request__get_packed_size
                     (const FmOpenRequest   *message);
size_t fm_open_request__pack
                     (const FmOpenRequest   *message,
                      uint8_t             *out);
size_t fm_open_request__pack_to_buffer
                     (const FmOpenRequest   *message,
                      ProtobufCBuffer     *buffer);
FmOpenRequest *
       fm_open_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_open_request__free_unpacked
                     (FmOpenRequest *message,
                      ProtobufCAllocator *allocator);
/* FmCloseRequest methods */
void   fm_close_request__init
                     (FmCloseRequest         *message);
size_t fm_close_request__get_packed_size
                     (const FmCloseRequest   *message);
size_t fm_close_request__pack
                     (const FmCloseRequest   *message,
                      uint8_t             *out);
size_t fm_close_request__pack_to_buffer
                     (const FmCloseRequest   *message,
                      ProtobufCBuffer     *buffer);
FmCloseRequest *
       fm_close_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_close_request__free_unpacked
                     (FmCloseRequest *message,
                      ProtobufCAllocator *allocator);
/* FmSeekRequest methods */
void   fm_seek_request__init
                     (FmSeekRequest         *message);
size_t fm_seek_request__get_packed_size
                     (const FmSeekRequest   *message);
size_t fm_seek_request__pack
                     (const FmSeekRequest   *message,
                      uint8_t             *out);
size_t fm_seek_request__pack_to_buffer
                     (const FmSeekRequest   *message,
                      ProtobufCBuffer     *buffer);
FmSeekRequest *
       fm_seek_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_seek_request__free_unpacked
                     (FmSeekRequest *message,
                      ProtobufCAllocator *allocator);
/* FmReadRequest methods */
void   fm_read_request__init
                     (FmReadRequest         *message);
size_t fm_read_request__get_packed_size
                     (const FmReadRequest   *message);
size_t fm_read_request__pack
                     (const FmReadRequest   *message,
                      uint8_t             *out);
size_t fm_read_request__pack_to_buffer
                     (const FmReadRequest   *message,
                      ProtobufCBuffer     *buffer);
FmReadRequest *
       fm_read_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_read_request__free_unpacked
                     (FmReadRequest *message,
                      ProtobufCAllocator *allocator);
/* FmReadResponse methods */
void   fm_read_response__init
                     (FmReadResponse         *message);
size_t fm_read_response__get_packed_size
                     (const FmReadResponse   *message);
size_t fm_read_response__pack
                     (const FmReadResponse   *message,
                      uint8_t             *out);
size_t fm_read_response__pack_to_buffer
                     (const FmReadResponse   *message,
                      ProtobufCBuffer     *buffer);
FmReadResponse *
       fm_read_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_read_response__free_unpacked
                     (FmReadResponse *message,
                      ProtobufCAllocator *allocator);
/* FmWriteRequest methods */
void   fm_write_request__init
                     (FmWriteRequest         *message);
size_t fm_write_request__get_packed_size
                     (const FmWriteRequest   *message);
size_t fm_write_request__pack
                     (const FmWriteRequest   *message,
                      uint8_t             *out);
size_t fm_write_request__pack_to_buffer
                     (const FmWriteRequest   *message,
                      ProtobufCBuffer     *buffer);
FmWriteRequest *
       fm_write_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_write_request__free_unpacked
                     (FmWriteRequest *message,
                      ProtobufCAllocator *allocator);
/* FmDent methods */
void   fm_dent__init
                     (FmDent         *message);
size_t fm_dent__get_packed_size
                     (const FmDent   *message);
size_t fm_dent__pack
                     (const FmDent   *message,
                      uint8_t             *out);
size_t fm_dent__pack_to_buffer
                     (const FmDent   *message,
                      ProtobufCBuffer     *buffer);
FmDent *
       fm_dent__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_dent__free_unpacked
                     (FmDent *message,
                      ProtobufCAllocator *allocator);
/* FmGetDentsRequest methods */
void   fm_get_dents_request__init
                     (FmGetDentsRequest         *message);
size_t fm_get_dents_request__get_packed_size
                     (const FmGetDentsRequest   *message);
size_t fm_get_dents_request__pack
                     (const FmGetDentsRequest   *message,
                      uint8_t             *out);
size_t fm_get_dents_request__pack_to_buffer
                     (const FmGetDentsRequest   *message,
                      ProtobufCBuffer     *buffer);
FmGetDentsRequest *
       fm_get_dents_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_get_dents_request__free_unpacked
                     (FmGetDentsRequest *message,
                      ProtobufCAllocator *allocator);
/* FmGetDentsResponse methods */
void   fm_get_dents_response__init
                     (FmGetDentsResponse         *message);
size_t fm_get_dents_response__get_packed_size
                     (const FmGetDentsResponse   *message);
size_t fm_get_dents_response__pack
                     (const FmGetDentsResponse   *message,
                      uint8_t             *out);
size_t fm_get_dents_response__pack_to_buffer
                     (const FmGetDentsResponse   *message,
                      ProtobufCBuffer     *buffer);
FmGetDentsResponse *
       fm_get_dents_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_get_dents_response__free_unpacked
                     (FmGetDentsResponse *message,
                      ProtobufCAllocator *allocator);
/* FmTimespec methods */
void   fm_timespec__init
                     (FmTimespec         *message);
size_t fm_timespec__get_packed_size
                     (const FmTimespec   *message);
size_t fm_timespec__pack
                     (const FmTimespec   *message,
                      uint8_t             *out);
size_t fm_timespec__pack_to_buffer
                     (const FmTimespec   *message,
                      ProtobufCBuffer     *buffer);
FmTimespec *
       fm_timespec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_timespec__free_unpacked
                     (FmTimespec *message,
                      ProtobufCAllocator *allocator);
/* FmStatRequest methods */
void   fm_stat_request__init
                     (FmStatRequest         *message);
size_t fm_stat_request__get_packed_size
                     (const FmStatRequest   *message);
size_t fm_stat_request__pack
                     (const FmStatRequest   *message,
                      uint8_t             *out);
size_t fm_stat_request__pack_to_buffer
                     (const FmStatRequest   *message,
                      ProtobufCBuffer     *buffer);
FmStatRequest *
       fm_stat_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_stat_request__free_unpacked
                     (FmStatRequest *message,
                      ProtobufCAllocator *allocator);
/* FmStatResponse methods */
void   fm_stat_response__init
                     (FmStatResponse         *message);
size_t fm_stat_response__get_packed_size
                     (const FmStatResponse   *message);
size_t fm_stat_response__pack
                     (const FmStatResponse   *message,
                      uint8_t             *out);
size_t fm_stat_response__pack_to_buffer
                     (const FmStatResponse   *message,
                      ProtobufCBuffer     *buffer);
FmStatResponse *
       fm_stat_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_stat_response__free_unpacked
                     (FmStatResponse *message,
                      ProtobufCAllocator *allocator);
/* FmMkdirRequest methods */
void   fm_mkdir_request__init
                     (FmMkdirRequest         *message);
size_t fm_mkdir_request__get_packed_size
                     (const FmMkdirRequest   *message);
size_t fm_mkdir_request__pack
                     (const FmMkdirRequest   *message,
                      uint8_t             *out);
size_t fm_mkdir_request__pack_to_buffer
                     (const FmMkdirRequest   *message,
                      ProtobufCBuffer     *buffer);
FmMkdirRequest *
       fm_mkdir_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_mkdir_request__free_unpacked
                     (FmMkdirRequest *message,
                      ProtobufCAllocator *allocator);
/* FmRmdirRequest methods */
void   fm_rmdir_request__init
                     (FmRmdirRequest         *message);
size_t fm_rmdir_request__get_packed_size
                     (const FmRmdirRequest   *message);
size_t fm_rmdir_request__pack
                     (const FmRmdirRequest   *message,
                      uint8_t             *out);
size_t fm_rmdir_request__pack_to_buffer
                     (const FmRmdirRequest   *message,
                      ProtobufCBuffer     *buffer);
FmRmdirRequest *
       fm_rmdir_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_rmdir_request__free_unpacked
                     (FmRmdirRequest *message,
                      ProtobufCAllocator *allocator);
/* FmUnlinkRequest methods */
void   fm_unlink_request__init
                     (FmUnlinkRequest         *message);
size_t fm_unlink_request__get_packed_size
                     (const FmUnlinkRequest   *message);
size_t fm_unlink_request__pack
                     (const FmUnlinkRequest   *message,
                      uint8_t             *out);
size_t fm_unlink_request__pack_to_buffer
                     (const FmUnlinkRequest   *message,
                      ProtobufCBuffer     *buffer);
FmUnlinkRequest *
       fm_unlink_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_unlink_request__free_unpacked
                     (FmUnlinkRequest *message,
                      ProtobufCAllocator *allocator);
/* FmDecryptSelfRequest methods */
void   fm_decrypt_self_request__init
                     (FmDecryptSelfRequest         *message);
size_t fm_decrypt_self_request__get_packed_size
                     (const FmDecryptSelfRequest   *message);
size_t fm_decrypt_self_request__pack
                     (const FmDecryptSelfRequest   *message,
                      uint8_t             *out);
size_t fm_decrypt_self_request__pack_to_buffer
                     (const FmDecryptSelfRequest   *message,
                      ProtobufCBuffer     *buffer);
FmDecryptSelfRequest *
       fm_decrypt_self_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_decrypt_self_request__free_unpacked
                     (FmDecryptSelfRequest *message,
                      ProtobufCAllocator *allocator);
/* FmDecryptSelfResponse methods */
void   fm_decrypt_self_response__init
                     (FmDecryptSelfResponse         *message);
size_t fm_decrypt_self_response__get_packed_size
                     (const FmDecryptSelfResponse   *message);
size_t fm_decrypt_self_response__pack
                     (const FmDecryptSelfResponse   *message,
                      uint8_t             *out);
size_t fm_decrypt_self_response__pack_to_buffer
                     (const FmDecryptSelfResponse   *message,
                      ProtobufCBuffer     *buffer);
FmDecryptSelfResponse *
       fm_decrypt_self_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fm_decrypt_self_response__free_unpacked
                     (FmDecryptSelfResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*FmEchoRequest_Closure)
                 (const FmEchoRequest *message,
                  void *closure_data);
typedef void (*FmOpenRequest_Closure)
                 (const FmOpenRequest *message,
                  void *closure_data);
typedef void (*FmCloseRequest_Closure)
                 (const FmCloseRequest *message,
                  void *closure_data);
typedef void (*FmSeekRequest_Closure)
                 (const FmSeekRequest *message,
                  void *closure_data);
typedef void (*FmReadRequest_Closure)
                 (const FmReadRequest *message,
                  void *closure_data);
typedef void (*FmReadResponse_Closure)
                 (const FmReadResponse *message,
                  void *closure_data);
typedef void (*FmWriteRequest_Closure)
                 (const FmWriteRequest *message,
                  void *closure_data);
typedef void (*FmDent_Closure)
                 (const FmDent *message,
                  void *closure_data);
typedef void (*FmGetDentsRequest_Closure)
                 (const FmGetDentsRequest *message,
                  void *closure_data);
typedef void (*FmGetDentsResponse_Closure)
                 (const FmGetDentsResponse *message,
                  void *closure_data);
typedef void (*FmTimespec_Closure)
                 (const FmTimespec *message,
                  void *closure_data);
typedef void (*FmStatRequest_Closure)
                 (const FmStatRequest *message,
                  void *closure_data);
typedef void (*FmStatResponse_Closure)
                 (const FmStatResponse *message,
                  void *closure_data);
typedef void (*FmMkdirRequest_Closure)
                 (const FmMkdirRequest *message,
                  void *closure_data);
typedef void (*FmRmdirRequest_Closure)
                 (const FmRmdirRequest *message,
                  void *closure_data);
typedef void (*FmUnlinkRequest_Closure)
                 (const FmUnlinkRequest *message,
                  void *closure_data);
typedef void (*FmDecryptSelfRequest_Closure)
                 (const FmDecryptSelfRequest *message,
                  void *closure_data);
typedef void (*FmDecryptSelfResponse_Closure)
                 (const FmDecryptSelfResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor fm_echo_request__descriptor;
extern const ProtobufCMessageDescriptor fm_open_request__descriptor;
extern const ProtobufCMessageDescriptor fm_close_request__descriptor;
extern const ProtobufCMessageDescriptor fm_seek_request__descriptor;
extern const ProtobufCMessageDescriptor fm_read_request__descriptor;
extern const ProtobufCMessageDescriptor fm_read_response__descriptor;
extern const ProtobufCMessageDescriptor fm_write_request__descriptor;
extern const ProtobufCMessageDescriptor fm_dent__descriptor;
extern const ProtobufCMessageDescriptor fm_get_dents_request__descriptor;
extern const ProtobufCMessageDescriptor fm_get_dents_response__descriptor;
extern const ProtobufCMessageDescriptor fm_timespec__descriptor;
extern const ProtobufCMessageDescriptor fm_stat_request__descriptor;
extern const ProtobufCMessageDescriptor fm_stat_response__descriptor;
extern const ProtobufCMessageDescriptor fm_mkdir_request__descriptor;
extern const ProtobufCMessageDescriptor fm_rmdir_request__descriptor;
extern const ProtobufCMessageDescriptor fm_unlink_request__descriptor;
extern const ProtobufCMessageDescriptor fm_decrypt_self_request__descriptor;
extern const ProtobufCMessageDescriptor fm_decrypt_self_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_external_2ffilemanager_2eproto__INCLUDED */
