// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FileManager.proto
#ifndef GRPC_FileManager_2eproto__INCLUDED
#define GRPC_FileManager_2eproto__INCLUDED

#include "FileManager.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Mira {
namespace Rpc {
namespace FileManager {

class FileManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "Mira.Rpc.FileManager.FileManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Echo(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::Mira::Rpc::FileManager::EmptyReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::EmptyReply>> AsyncEcho(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::EmptyReply>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::EmptyReply>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::EmptyReply>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    virtual ::grpc::Status Open(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::Mira::Rpc::FileManager::OpenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::OpenResponse>> AsyncOpen(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::OpenResponse>>(AsyncOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::OpenResponse>> PrepareAsyncOpen(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::OpenResponse>>(PrepareAsyncOpenRaw(context, request, cq));
    }
    virtual ::grpc::Status Close(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::Mira::Rpc::FileManager::CloseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::CloseResponse>> AsyncClose(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::CloseResponse>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::CloseResponse>> PrepareAsyncClose(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::CloseResponse>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Mira::Rpc::FileManager::ReadResponse>> Read(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Mira::Rpc::FileManager::ReadResponse>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ReadResponse>> AsyncRead(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ReadResponse>>(AsyncReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ReadResponse>> PrepareAsyncRead(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ReadResponse>>(PrepareAsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Mira::Rpc::FileManager::ListResponse>> List(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Mira::Rpc::FileManager::ListResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ListResponse>> AsyncList(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ListResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    virtual ::grpc::Status Stat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::Mira::Rpc::FileManager::StatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::StatResponse>> AsyncStat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::StatResponse>>(AsyncStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::StatResponse>> PrepareAsyncStat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::StatResponse>>(PrepareAsyncStatRaw(context, request, cq));
    }
    virtual ::grpc::Status Mkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::Mira::Rpc::FileManager::MkdirResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::MkdirResponse>> AsyncMkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::MkdirResponse>>(AsyncMkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::MkdirResponse>> PrepareAsyncMkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::MkdirResponse>>(PrepareAsyncMkdirRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Echo(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest* request, ::Mira::Rpc::FileManager::EmptyReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Echo(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest* request, ::Mira::Rpc::FileManager::EmptyReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Echo(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest* request, ::Mira::Rpc::FileManager::EmptyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Open(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest* request, ::Mira::Rpc::FileManager::OpenResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Open(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest* request, ::Mira::Rpc::FileManager::OpenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Open(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest* request, ::Mira::Rpc::FileManager::OpenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Close(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest* request, ::Mira::Rpc::FileManager::CloseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Close(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest* request, ::Mira::Rpc::FileManager::CloseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Close(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest* request, ::Mira::Rpc::FileManager::CloseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Read(::grpc::ClientContext* context, ::Mira::Rpc::FileManager::ReadRequest* request, ::grpc::ClientReadReactor< ::Mira::Rpc::FileManager::ReadResponse>* reactor) = 0;
      #else
      virtual void Read(::grpc::ClientContext* context, ::Mira::Rpc::FileManager::ReadRequest* request, ::grpc::experimental::ClientReadReactor< ::Mira::Rpc::FileManager::ReadResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void List(::grpc::ClientContext* context, ::Mira::Rpc::FileManager::ListRequest* request, ::grpc::ClientReadReactor< ::Mira::Rpc::FileManager::ListResponse>* reactor) = 0;
      #else
      virtual void List(::grpc::ClientContext* context, ::Mira::Rpc::FileManager::ListRequest* request, ::grpc::experimental::ClientReadReactor< ::Mira::Rpc::FileManager::ListResponse>* reactor) = 0;
      #endif
      virtual void Stat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest* request, ::Mira::Rpc::FileManager::StatResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Stat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest* request, ::Mira::Rpc::FileManager::StatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Stat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest* request, ::Mira::Rpc::FileManager::StatResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Mkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest* request, ::Mira::Rpc::FileManager::MkdirResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Mkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest* request, ::Mira::Rpc::FileManager::MkdirResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Mkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest* request, ::Mira::Rpc::FileManager::MkdirResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::EmptyReply>* AsyncEchoRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::EmptyReply>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::OpenResponse>* AsyncOpenRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::OpenResponse>* PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::CloseResponse>* AsyncCloseRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::CloseResponse>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::Mira::Rpc::FileManager::ReadResponse>* ReadRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ReadResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ReadResponse>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::Mira::Rpc::FileManager::ListResponse>* ListRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Mira::Rpc::FileManager::ListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::StatResponse>* AsyncStatRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::StatResponse>* PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::MkdirResponse>* AsyncMkdirRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mira::Rpc::FileManager::MkdirResponse>* PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Echo(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::Mira::Rpc::FileManager::EmptyReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::EmptyReply>> AsyncEcho(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::EmptyReply>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::EmptyReply>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::EmptyReply>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    ::grpc::Status Open(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::Mira::Rpc::FileManager::OpenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::OpenResponse>> AsyncOpen(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::OpenResponse>>(AsyncOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::OpenResponse>> PrepareAsyncOpen(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::OpenResponse>>(PrepareAsyncOpenRaw(context, request, cq));
    }
    ::grpc::Status Close(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::Mira::Rpc::FileManager::CloseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::CloseResponse>> AsyncClose(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::CloseResponse>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::CloseResponse>> PrepareAsyncClose(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::CloseResponse>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::Mira::Rpc::FileManager::ReadResponse>> Read(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Mira::Rpc::FileManager::ReadResponse>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ReadResponse>> AsyncRead(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ReadResponse>>(AsyncReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ReadResponse>> PrepareAsyncRead(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ReadResponse>>(PrepareAsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::Mira::Rpc::FileManager::ListResponse>> List(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Mira::Rpc::FileManager::ListResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ListResponse>> AsyncList(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ListResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    ::grpc::Status Stat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::Mira::Rpc::FileManager::StatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::StatResponse>> AsyncStat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::StatResponse>>(AsyncStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::StatResponse>> PrepareAsyncStat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::StatResponse>>(PrepareAsyncStatRaw(context, request, cq));
    }
    ::grpc::Status Mkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::Mira::Rpc::FileManager::MkdirResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::MkdirResponse>> AsyncMkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::MkdirResponse>>(AsyncMkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::MkdirResponse>> PrepareAsyncMkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::MkdirResponse>>(PrepareAsyncMkdirRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Echo(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest* request, ::Mira::Rpc::FileManager::EmptyReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Echo(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest* request, ::Mira::Rpc::FileManager::EmptyReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Echo(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest* request, ::Mira::Rpc::FileManager::EmptyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Open(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest* request, ::Mira::Rpc::FileManager::OpenResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Open(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest* request, ::Mira::Rpc::FileManager::OpenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Open(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest* request, ::Mira::Rpc::FileManager::OpenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Close(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest* request, ::Mira::Rpc::FileManager::CloseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Close(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest* request, ::Mira::Rpc::FileManager::CloseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Close(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest* request, ::Mira::Rpc::FileManager::CloseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Read(::grpc::ClientContext* context, ::Mira::Rpc::FileManager::ReadRequest* request, ::grpc::ClientReadReactor< ::Mira::Rpc::FileManager::ReadResponse>* reactor) override;
      #else
      void Read(::grpc::ClientContext* context, ::Mira::Rpc::FileManager::ReadRequest* request, ::grpc::experimental::ClientReadReactor< ::Mira::Rpc::FileManager::ReadResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void List(::grpc::ClientContext* context, ::Mira::Rpc::FileManager::ListRequest* request, ::grpc::ClientReadReactor< ::Mira::Rpc::FileManager::ListResponse>* reactor) override;
      #else
      void List(::grpc::ClientContext* context, ::Mira::Rpc::FileManager::ListRequest* request, ::grpc::experimental::ClientReadReactor< ::Mira::Rpc::FileManager::ListResponse>* reactor) override;
      #endif
      void Stat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest* request, ::Mira::Rpc::FileManager::StatResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Stat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest* request, ::Mira::Rpc::FileManager::StatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Stat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest* request, ::Mira::Rpc::FileManager::StatResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Mkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest* request, ::Mira::Rpc::FileManager::MkdirResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Mkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest* request, ::Mira::Rpc::FileManager::MkdirResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Mkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest* request, ::Mira::Rpc::FileManager::MkdirResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::EmptyReply>* AsyncEchoRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::EmptyReply>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::OpenResponse>* AsyncOpenRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::OpenResponse>* PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::CloseResponse>* AsyncCloseRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::CloseResponse>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::Mira::Rpc::FileManager::ReadResponse>* ReadRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request) override;
    ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ReadResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ReadResponse>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::Mira::Rpc::FileManager::ListResponse>* ListRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request) override;
    ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::StatResponse>* AsyncStatRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::StatResponse>* PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::MkdirResponse>* AsyncMkdirRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::MkdirResponse>* PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Echo_;
    const ::grpc::internal::RpcMethod rpcmethod_Open_;
    const ::grpc::internal::RpcMethod rpcmethod_Close_;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Stat_;
    const ::grpc::internal::RpcMethod rpcmethod_Mkdir_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Echo(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::EchoRequest* request, ::Mira::Rpc::FileManager::EmptyReply* response);
    virtual ::grpc::Status Open(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::OpenRequest* request, ::Mira::Rpc::FileManager::OpenResponse* response);
    virtual ::grpc::Status Close(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::CloseRequest* request, ::Mira::Rpc::FileManager::CloseResponse* response);
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::ReadRequest* request, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ReadResponse>* writer);
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::ListRequest* request, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ListResponse>* writer);
    virtual ::grpc::Status Stat(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::StatRequest* request, ::Mira::Rpc::FileManager::StatResponse* response);
    virtual ::grpc::Status Mkdir(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::MkdirRequest* request, ::Mira::Rpc::FileManager::MkdirResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Echo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::EchoRequest* /*request*/, ::Mira::Rpc::FileManager::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::Mira::Rpc::FileManager::EchoRequest* request, ::grpc::ServerAsyncResponseWriter< ::Mira::Rpc::FileManager::EmptyReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Open() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::OpenRequest* /*request*/, ::Mira::Rpc::FileManager::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpen(::grpc::ServerContext* context, ::Mira::Rpc::FileManager::OpenRequest* request, ::grpc::ServerAsyncResponseWriter< ::Mira::Rpc::FileManager::OpenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Close() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::CloseRequest* /*request*/, ::Mira::Rpc::FileManager::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::Mira::Rpc::FileManager::CloseRequest* request, ::grpc::ServerAsyncResponseWriter< ::Mira::Rpc::FileManager::CloseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ReadRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::Mira::Rpc::FileManager::ReadRequest* request, ::grpc::ServerAsyncWriter< ::Mira::Rpc::FileManager::ReadResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ListRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::Mira::Rpc::FileManager::ListRequest* request, ::grpc::ServerAsyncWriter< ::Mira::Rpc::FileManager::ListResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stat() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::StatRequest* /*request*/, ::Mira::Rpc::FileManager::StatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStat(::grpc::ServerContext* context, ::Mira::Rpc::FileManager::StatRequest* request, ::grpc::ServerAsyncResponseWriter< ::Mira::Rpc::FileManager::StatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Mkdir() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::MkdirRequest* /*request*/, ::Mira::Rpc::FileManager::MkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMkdir(::grpc::ServerContext* context, ::Mira::Rpc::FileManager::MkdirRequest* request, ::grpc::ServerAsyncResponseWriter< ::Mira::Rpc::FileManager::MkdirResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Echo<WithAsyncMethod_Open<WithAsyncMethod_Close<WithAsyncMethod_Read<WithAsyncMethod_List<WithAsyncMethod_Stat<WithAsyncMethod_Mkdir<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Echo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Mira::Rpc::FileManager::EchoRequest, ::Mira::Rpc::FileManager::EmptyReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Mira::Rpc::FileManager::EchoRequest* request, ::Mira::Rpc::FileManager::EmptyReply* response) { return this->Echo(context, request, response); }));}
    void SetMessageAllocatorFor_Echo(
        ::grpc::experimental::MessageAllocator< ::Mira::Rpc::FileManager::EchoRequest, ::Mira::Rpc::FileManager::EmptyReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Mira::Rpc::FileManager::EchoRequest, ::Mira::Rpc::FileManager::EmptyReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::EchoRequest* /*request*/, ::Mira::Rpc::FileManager::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Echo(
      ::grpc::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::EchoRequest* /*request*/, ::Mira::Rpc::FileManager::EmptyReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Echo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::EchoRequest* /*request*/, ::Mira::Rpc::FileManager::EmptyReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Open() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Mira::Rpc::FileManager::OpenRequest, ::Mira::Rpc::FileManager::OpenResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Mira::Rpc::FileManager::OpenRequest* request, ::Mira::Rpc::FileManager::OpenResponse* response) { return this->Open(context, request, response); }));}
    void SetMessageAllocatorFor_Open(
        ::grpc::experimental::MessageAllocator< ::Mira::Rpc::FileManager::OpenRequest, ::Mira::Rpc::FileManager::OpenResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Mira::Rpc::FileManager::OpenRequest, ::Mira::Rpc::FileManager::OpenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::OpenRequest* /*request*/, ::Mira::Rpc::FileManager::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Open(
      ::grpc::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::OpenRequest* /*request*/, ::Mira::Rpc::FileManager::OpenResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Open(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::OpenRequest* /*request*/, ::Mira::Rpc::FileManager::OpenResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Close() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Mira::Rpc::FileManager::CloseRequest, ::Mira::Rpc::FileManager::CloseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Mira::Rpc::FileManager::CloseRequest* request, ::Mira::Rpc::FileManager::CloseResponse* response) { return this->Close(context, request, response); }));}
    void SetMessageAllocatorFor_Close(
        ::grpc::experimental::MessageAllocator< ::Mira::Rpc::FileManager::CloseRequest, ::Mira::Rpc::FileManager::CloseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Mira::Rpc::FileManager::CloseRequest, ::Mira::Rpc::FileManager::CloseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::CloseRequest* /*request*/, ::Mira::Rpc::FileManager::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Close(
      ::grpc::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::CloseRequest* /*request*/, ::Mira::Rpc::FileManager::CloseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Close(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::CloseRequest* /*request*/, ::Mira::Rpc::FileManager::CloseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Mira::Rpc::FileManager::ReadRequest, ::Mira::Rpc::FileManager::ReadResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Mira::Rpc::FileManager::ReadRequest* request) { return this->Read(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ReadRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::Mira::Rpc::FileManager::ReadResponse>* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::ReadRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::Mira::Rpc::FileManager::ReadResponse>* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::ReadRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Mira::Rpc::FileManager::ListRequest, ::Mira::Rpc::FileManager::ListResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Mira::Rpc::FileManager::ListRequest* request) { return this->List(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ListRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::Mira::Rpc::FileManager::ListResponse>* List(
      ::grpc::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::ListRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::Mira::Rpc::FileManager::ListResponse>* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::ListRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Stat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::Mira::Rpc::FileManager::StatRequest, ::Mira::Rpc::FileManager::StatResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Mira::Rpc::FileManager::StatRequest* request, ::Mira::Rpc::FileManager::StatResponse* response) { return this->Stat(context, request, response); }));}
    void SetMessageAllocatorFor_Stat(
        ::grpc::experimental::MessageAllocator< ::Mira::Rpc::FileManager::StatRequest, ::Mira::Rpc::FileManager::StatResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Mira::Rpc::FileManager::StatRequest, ::Mira::Rpc::FileManager::StatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::StatRequest* /*request*/, ::Mira::Rpc::FileManager::StatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Stat(
      ::grpc::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::StatRequest* /*request*/, ::Mira::Rpc::FileManager::StatResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Stat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::StatRequest* /*request*/, ::Mira::Rpc::FileManager::StatResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Mkdir() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::Mira::Rpc::FileManager::MkdirRequest, ::Mira::Rpc::FileManager::MkdirResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Mira::Rpc::FileManager::MkdirRequest* request, ::Mira::Rpc::FileManager::MkdirResponse* response) { return this->Mkdir(context, request, response); }));}
    void SetMessageAllocatorFor_Mkdir(
        ::grpc::experimental::MessageAllocator< ::Mira::Rpc::FileManager::MkdirRequest, ::Mira::Rpc::FileManager::MkdirResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Mira::Rpc::FileManager::MkdirRequest, ::Mira::Rpc::FileManager::MkdirResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::MkdirRequest* /*request*/, ::Mira::Rpc::FileManager::MkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::MkdirRequest* /*request*/, ::Mira::Rpc::FileManager::MkdirResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Mkdir(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Mira::Rpc::FileManager::MkdirRequest* /*request*/, ::Mira::Rpc::FileManager::MkdirResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Echo<ExperimentalWithCallbackMethod_Open<ExperimentalWithCallbackMethod_Close<ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_Stat<ExperimentalWithCallbackMethod_Mkdir<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Echo<ExperimentalWithCallbackMethod_Open<ExperimentalWithCallbackMethod_Close<ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_Stat<ExperimentalWithCallbackMethod_Mkdir<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Echo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::EchoRequest* /*request*/, ::Mira::Rpc::FileManager::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Open() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::OpenRequest* /*request*/, ::Mira::Rpc::FileManager::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Close() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::CloseRequest* /*request*/, ::Mira::Rpc::FileManager::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ReadRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ListRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stat() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::StatRequest* /*request*/, ::Mira::Rpc::FileManager::StatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Mkdir() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::MkdirRequest* /*request*/, ::Mira::Rpc::FileManager::MkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Echo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::EchoRequest* /*request*/, ::Mira::Rpc::FileManager::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Open() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::OpenRequest* /*request*/, ::Mira::Rpc::FileManager::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Close() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::CloseRequest* /*request*/, ::Mira::Rpc::FileManager::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ReadRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ListRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stat() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::StatRequest* /*request*/, ::Mira::Rpc::FileManager::StatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Mkdir() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::MkdirRequest* /*request*/, ::Mira::Rpc::FileManager::MkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMkdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Echo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Echo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::EchoRequest* /*request*/, ::Mira::Rpc::FileManager::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Echo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Echo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Open() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Open(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::OpenRequest* /*request*/, ::Mira::Rpc::FileManager::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Open(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Open(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Close() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Close(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::CloseRequest* /*request*/, ::Mira::Rpc::FileManager::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Close(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Close(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Read(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ReadRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->List(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ListRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Stat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stat(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::StatRequest* /*request*/, ::Mira::Rpc::FileManager::StatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Stat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Stat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Mkdir() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Mkdir(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::MkdirRequest* /*request*/, ::Mira::Rpc::FileManager::MkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Mkdir(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Echo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Mira::Rpc::FileManager::EchoRequest, ::Mira::Rpc::FileManager::EmptyReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Mira::Rpc::FileManager::EchoRequest, ::Mira::Rpc::FileManager::EmptyReply>* streamer) {
                       return this->StreamedEcho(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::EchoRequest* /*request*/, ::Mira::Rpc::FileManager::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEcho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Mira::Rpc::FileManager::EchoRequest,::Mira::Rpc::FileManager::EmptyReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Open() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Mira::Rpc::FileManager::OpenRequest, ::Mira::Rpc::FileManager::OpenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Mira::Rpc::FileManager::OpenRequest, ::Mira::Rpc::FileManager::OpenResponse>* streamer) {
                       return this->StreamedOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::OpenRequest* /*request*/, ::Mira::Rpc::FileManager::OpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Mira::Rpc::FileManager::OpenRequest,::Mira::Rpc::FileManager::OpenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Close() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Mira::Rpc::FileManager::CloseRequest, ::Mira::Rpc::FileManager::CloseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Mira::Rpc::FileManager::CloseRequest, ::Mira::Rpc::FileManager::CloseResponse>* streamer) {
                       return this->StreamedClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::CloseRequest* /*request*/, ::Mira::Rpc::FileManager::CloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Mira::Rpc::FileManager::CloseRequest,::Mira::Rpc::FileManager::CloseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stat() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Mira::Rpc::FileManager::StatRequest, ::Mira::Rpc::FileManager::StatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Mira::Rpc::FileManager::StatRequest, ::Mira::Rpc::FileManager::StatResponse>* streamer) {
                       return this->StreamedStat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::StatRequest* /*request*/, ::Mira::Rpc::FileManager::StatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Mira::Rpc::FileManager::StatRequest,::Mira::Rpc::FileManager::StatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Mkdir() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Mira::Rpc::FileManager::MkdirRequest, ::Mira::Rpc::FileManager::MkdirResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Mira::Rpc::FileManager::MkdirRequest, ::Mira::Rpc::FileManager::MkdirResponse>* streamer) {
                       return this->StreamedMkdir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::MkdirRequest* /*request*/, ::Mira::Rpc::FileManager::MkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMkdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Mira::Rpc::FileManager::MkdirRequest,::Mira::Rpc::FileManager::MkdirResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Echo<WithStreamedUnaryMethod_Open<WithStreamedUnaryMethod_Close<WithStreamedUnaryMethod_Stat<WithStreamedUnaryMethod_Mkdir<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Mira::Rpc::FileManager::ReadRequest, ::Mira::Rpc::FileManager::ReadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Mira::Rpc::FileManager::ReadRequest, ::Mira::Rpc::FileManager::ReadResponse>* streamer) {
                       return this->StreamedRead(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ReadRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Mira::Rpc::FileManager::ReadRequest,::Mira::Rpc::FileManager::ReadResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_List() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Mira::Rpc::FileManager::ListRequest, ::Mira::Rpc::FileManager::ListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Mira::Rpc::FileManager::ListRequest, ::Mira::Rpc::FileManager::ListResponse>* streamer) {
                       return this->StreamedList(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::Mira::Rpc::FileManager::ListRequest* /*request*/, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Mira::Rpc::FileManager::ListRequest,::Mira::Rpc::FileManager::ListResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Read<WithSplitStreamingMethod_List<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Echo<WithStreamedUnaryMethod_Open<WithStreamedUnaryMethod_Close<WithSplitStreamingMethod_Read<WithSplitStreamingMethod_List<WithStreamedUnaryMethod_Stat<WithStreamedUnaryMethod_Mkdir<Service > > > > > > > StreamedService;
};

}  // namespace FileManager
}  // namespace Rpc
}  // namespace Mira


#endif  // GRPC_FileManager_2eproto__INCLUDED
