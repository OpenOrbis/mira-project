// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rpc_2eproto;
namespace Mira {
namespace Rpc {
class RpcMessage;
class RpcMessageDefaultTypeInternal;
extern RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
}  // namespace Rpc
}  // namespace Mira
PROTOBUF_NAMESPACE_OPEN
template<> ::Mira::Rpc::RpcMessage* Arena::CreateMaybeMessage<::Mira::Rpc::RpcMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Mira {
namespace Rpc {

enum RpcMessage_Magic : int {
  RpcMessage_Magic_NO_MAGIC = 0,
  RpcMessage_Magic_V1 = 1,
  RpcMessage_Magic_V2 = 2,
  RpcMessage_Magic_V3 = 3,
  RpcMessage_Magic_MAGIC_COUNT = 4,
  RpcMessage_Magic_RpcMessage_Magic_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RpcMessage_Magic_RpcMessage_Magic_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RpcMessage_Magic_IsValid(int value);
constexpr RpcMessage_Magic RpcMessage_Magic_Magic_MIN = RpcMessage_Magic_NO_MAGIC;
constexpr RpcMessage_Magic RpcMessage_Magic_Magic_MAX = RpcMessage_Magic_MAGIC_COUNT;
constexpr int RpcMessage_Magic_Magic_ARRAYSIZE = RpcMessage_Magic_Magic_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcMessage_Magic_descriptor();
template<typename T>
inline const std::string& RpcMessage_Magic_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcMessage_Magic>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcMessage_Magic_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcMessage_Magic_descriptor(), enum_t_value);
}
inline bool RpcMessage_Magic_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RpcMessage_Magic* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcMessage_Magic>(
    RpcMessage_Magic_descriptor(), name, value);
}
enum RpcMessage_RpcCategory : int {
  RpcMessage_RpcCategory_NO_CATEGORY = 0,
  RpcMessage_RpcCategory_SYSTEM = 1,
  RpcMessage_RpcCategory_LOG = 2,
  RpcMessage_RpcCategory_DEBUG = 3,
  RpcMessage_RpcCategory_FILE = 4,
  RpcMessage_RpcCategory_COMMAND = 5,
  RpcMessage_RpcCategory_RPC_COUNT = 6,
  RpcMessage_RpcCategory_RpcMessage_RpcCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RpcMessage_RpcCategory_RpcMessage_RpcCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RpcMessage_RpcCategory_IsValid(int value);
constexpr RpcMessage_RpcCategory RpcMessage_RpcCategory_RpcCategory_MIN = RpcMessage_RpcCategory_NO_CATEGORY;
constexpr RpcMessage_RpcCategory RpcMessage_RpcCategory_RpcCategory_MAX = RpcMessage_RpcCategory_RPC_COUNT;
constexpr int RpcMessage_RpcCategory_RpcCategory_ARRAYSIZE = RpcMessage_RpcCategory_RpcCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcMessage_RpcCategory_descriptor();
template<typename T>
inline const std::string& RpcMessage_RpcCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcMessage_RpcCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcMessage_RpcCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcMessage_RpcCategory_descriptor(), enum_t_value);
}
inline bool RpcMessage_RpcCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RpcMessage_RpcCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcMessage_RpcCategory>(
    RpcMessage_RpcCategory_descriptor(), name, value);
}
// ===================================================================

class RpcMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.RpcMessage) */ {
 public:
  inline RpcMessage() : RpcMessage(nullptr) {}
  virtual ~RpcMessage();

  RpcMessage(const RpcMessage& from);
  RpcMessage(RpcMessage&& from) noexcept
    : RpcMessage() {
    *this = ::std::move(from);
  }

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMessage& operator=(RpcMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcMessage& default_instance();

  static inline const RpcMessage* internal_default_instance() {
    return reinterpret_cast<const RpcMessage*>(
               &_RpcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcMessage& a, RpcMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcMessage* New() const final {
    return CreateMaybeMessage<RpcMessage>(nullptr);
  }

  RpcMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.RpcMessage";
  }
  protected:
  explicit RpcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RpcMessage_Magic Magic;
  static constexpr Magic NO_MAGIC =
    RpcMessage_Magic_NO_MAGIC;
  static constexpr Magic V1 =
    RpcMessage_Magic_V1;
  static constexpr Magic V2 =
    RpcMessage_Magic_V2;
  static constexpr Magic V3 =
    RpcMessage_Magic_V3;
  static constexpr Magic MAGIC_COUNT =
    RpcMessage_Magic_MAGIC_COUNT;
  static inline bool Magic_IsValid(int value) {
    return RpcMessage_Magic_IsValid(value);
  }
  static constexpr Magic Magic_MIN =
    RpcMessage_Magic_Magic_MIN;
  static constexpr Magic Magic_MAX =
    RpcMessage_Magic_Magic_MAX;
  static constexpr int Magic_ARRAYSIZE =
    RpcMessage_Magic_Magic_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Magic_descriptor() {
    return RpcMessage_Magic_descriptor();
  }
  template<typename T>
  static inline const std::string& Magic_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Magic>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Magic_Name.");
    return RpcMessage_Magic_Name(enum_t_value);
  }
  static inline bool Magic_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Magic* value) {
    return RpcMessage_Magic_Parse(name, value);
  }

  typedef RpcMessage_RpcCategory RpcCategory;
  static constexpr RpcCategory NO_CATEGORY =
    RpcMessage_RpcCategory_NO_CATEGORY;
  static constexpr RpcCategory SYSTEM =
    RpcMessage_RpcCategory_SYSTEM;
  static constexpr RpcCategory LOG =
    RpcMessage_RpcCategory_LOG;
  static constexpr RpcCategory DEBUG =
    RpcMessage_RpcCategory_DEBUG;
  static constexpr RpcCategory FILE =
    RpcMessage_RpcCategory_FILE;
  static constexpr RpcCategory COMMAND =
    RpcMessage_RpcCategory_COMMAND;
  static constexpr RpcCategory RPC_COUNT =
    RpcMessage_RpcCategory_RPC_COUNT;
  static inline bool RpcCategory_IsValid(int value) {
    return RpcMessage_RpcCategory_IsValid(value);
  }
  static constexpr RpcCategory RpcCategory_MIN =
    RpcMessage_RpcCategory_RpcCategory_MIN;
  static constexpr RpcCategory RpcCategory_MAX =
    RpcMessage_RpcCategory_RpcCategory_MAX;
  static constexpr int RpcCategory_ARRAYSIZE =
    RpcMessage_RpcCategory_RpcCategory_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RpcCategory_descriptor() {
    return RpcMessage_RpcCategory_descriptor();
  }
  template<typename T>
  static inline const std::string& RpcCategory_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RpcCategory>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RpcCategory_Name.");
    return RpcMessage_RpcCategory_Name(enum_t_value);
  }
  static inline bool RpcCategory_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RpcCategory* value) {
    return RpcMessage_RpcCategory_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInnerMessageFieldNumber = 3,
    kMagicFieldNumber = 1,
    kCategoryFieldNumber = 2,
    kErrorFieldNumber = 5,
  };
  // .google.protobuf.Any inner_message = 3;
  bool has_inner_message() const;
  private:
  bool _internal_has_inner_message() const;
  public:
  void clear_inner_message();
  const PROTOBUF_NAMESPACE_ID::Any& inner_message() const;
  PROTOBUF_NAMESPACE_ID::Any* release_inner_message();
  PROTOBUF_NAMESPACE_ID::Any* mutable_inner_message();
  void set_allocated_inner_message(PROTOBUF_NAMESPACE_ID::Any* inner_message);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_inner_message() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_inner_message();
  public:
  void unsafe_arena_set_allocated_inner_message(
      PROTOBUF_NAMESPACE_ID::Any* inner_message);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_inner_message();

  // .Mira.Rpc.RpcMessage.Magic magic = 1;
  void clear_magic();
  ::Mira::Rpc::RpcMessage_Magic magic() const;
  void set_magic(::Mira::Rpc::RpcMessage_Magic value);
  private:
  ::Mira::Rpc::RpcMessage_Magic _internal_magic() const;
  void _internal_set_magic(::Mira::Rpc::RpcMessage_Magic value);
  public:

  // .Mira.Rpc.RpcMessage.RpcCategory category = 2;
  void clear_category();
  ::Mira::Rpc::RpcMessage_RpcCategory category() const;
  void set_category(::Mira::Rpc::RpcMessage_RpcCategory value);
  private:
  ::Mira::Rpc::RpcMessage_RpcCategory _internal_category() const;
  void _internal_set_category(::Mira::Rpc::RpcMessage_RpcCategory value);
  public:

  // int32 error = 5;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.RpcMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* inner_message_;
  int magic_;
  int category_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcMessage

// .Mira.Rpc.RpcMessage.Magic magic = 1;
inline void RpcMessage::clear_magic() {
  magic_ = 0;
}
inline ::Mira::Rpc::RpcMessage_Magic RpcMessage::_internal_magic() const {
  return static_cast< ::Mira::Rpc::RpcMessage_Magic >(magic_);
}
inline ::Mira::Rpc::RpcMessage_Magic RpcMessage::magic() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.RpcMessage.magic)
  return _internal_magic();
}
inline void RpcMessage::_internal_set_magic(::Mira::Rpc::RpcMessage_Magic value) {
  
  magic_ = value;
}
inline void RpcMessage::set_magic(::Mira::Rpc::RpcMessage_Magic value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.RpcMessage.magic)
}

// .Mira.Rpc.RpcMessage.RpcCategory category = 2;
inline void RpcMessage::clear_category() {
  category_ = 0;
}
inline ::Mira::Rpc::RpcMessage_RpcCategory RpcMessage::_internal_category() const {
  return static_cast< ::Mira::Rpc::RpcMessage_RpcCategory >(category_);
}
inline ::Mira::Rpc::RpcMessage_RpcCategory RpcMessage::category() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.RpcMessage.category)
  return _internal_category();
}
inline void RpcMessage::_internal_set_category(::Mira::Rpc::RpcMessage_RpcCategory value) {
  
  category_ = value;
}
inline void RpcMessage::set_category(::Mira::Rpc::RpcMessage_RpcCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.RpcMessage.category)
}

// .google.protobuf.Any inner_message = 3;
inline bool RpcMessage::_internal_has_inner_message() const {
  return this != internal_default_instance() && inner_message_ != nullptr;
}
inline bool RpcMessage::has_inner_message() const {
  return _internal_has_inner_message();
}
inline const PROTOBUF_NAMESPACE_ID::Any& RpcMessage::_internal_inner_message() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = inner_message_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& RpcMessage::inner_message() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.RpcMessage.inner_message)
  return _internal_inner_message();
}
inline void RpcMessage::unsafe_arena_set_allocated_inner_message(
    PROTOBUF_NAMESPACE_ID::Any* inner_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_message_);
  }
  inner_message_ = inner_message;
  if (inner_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Mira.Rpc.RpcMessage.inner_message)
}
inline PROTOBUF_NAMESPACE_ID::Any* RpcMessage::release_inner_message() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = inner_message_;
  inner_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* RpcMessage::unsafe_arena_release_inner_message() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.RpcMessage.inner_message)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = inner_message_;
  inner_message_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* RpcMessage::_internal_mutable_inner_message() {
  
  if (inner_message_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    inner_message_ = p;
  }
  return inner_message_;
}
inline PROTOBUF_NAMESPACE_ID::Any* RpcMessage::mutable_inner_message() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.RpcMessage.inner_message)
  return _internal_mutable_inner_message();
}
inline void RpcMessage::set_allocated_inner_message(PROTOBUF_NAMESPACE_ID::Any* inner_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_message_);
  }
  if (inner_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_message)->GetArena();
    if (message_arena != submessage_arena) {
      inner_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner_message, submessage_arena);
    }
    
  } else {
    
  }
  inner_message_ = inner_message;
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.RpcMessage.inner_message)
}

// int32 error = 5;
inline void RpcMessage::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcMessage::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcMessage::error() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.RpcMessage.error)
  return _internal_error();
}
inline void RpcMessage::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void RpcMessage::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.RpcMessage.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Rpc
}  // namespace Mira

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Mira::Rpc::RpcMessage_Magic> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Mira::Rpc::RpcMessage_Magic>() {
  return ::Mira::Rpc::RpcMessage_Magic_descriptor();
}
template <> struct is_proto_enum< ::Mira::Rpc::RpcMessage_RpcCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Mira::Rpc::RpcMessage_RpcCategory>() {
  return ::Mira::Rpc::RpcMessage_RpcCategory_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Rpc_2eproto
