// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FileManager.proto

#include "FileManager.pb.h"
#include "FileManager.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Mira {
namespace Rpc {
namespace FileManager {

static const char* FileManagerService_method_names[] = {
  "/Mira.Rpc.FileManager.FileManagerService/Echo",
  "/Mira.Rpc.FileManager.FileManagerService/Open",
  "/Mira.Rpc.FileManager.FileManagerService/Close",
  "/Mira.Rpc.FileManager.FileManagerService/Read",
  "/Mira.Rpc.FileManager.FileManagerService/List",
  "/Mira.Rpc.FileManager.FileManagerService/Stat",
  "/Mira.Rpc.FileManager.FileManagerService/Mkdir",
};

std::unique_ptr< FileManagerService::Stub> FileManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileManagerService::Stub> stub(new FileManagerService::Stub(channel));
  return stub;
}

FileManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Echo_(FileManagerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Open_(FileManagerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Close_(FileManagerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Read_(FileManagerService_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_List_(FileManagerService_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Stat_(FileManagerService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mkdir_(FileManagerService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileManagerService::Stub::Echo(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::Mira::Rpc::FileManager::EmptyReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Mira::Rpc::FileManager::EchoRequest, ::Mira::Rpc::FileManager::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Echo_, context, request, response);
}

void FileManagerService::Stub::experimental_async::Echo(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest* request, ::Mira::Rpc::FileManager::EmptyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Mira::Rpc::FileManager::EchoRequest, ::Mira::Rpc::FileManager::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, std::move(f));
}

void FileManagerService::Stub::experimental_async::Echo(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest* request, ::Mira::Rpc::FileManager::EmptyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::EmptyReply>* FileManagerService::Stub::PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Mira::Rpc::FileManager::EmptyReply, ::Mira::Rpc::FileManager::EchoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Echo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::EmptyReply>* FileManagerService::Stub::AsyncEchoRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEchoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileManagerService::Stub::Open(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::Mira::Rpc::FileManager::OpenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Mira::Rpc::FileManager::OpenRequest, ::Mira::Rpc::FileManager::OpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Open_, context, request, response);
}

void FileManagerService::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest* request, ::Mira::Rpc::FileManager::OpenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Mira::Rpc::FileManager::OpenRequest, ::Mira::Rpc::FileManager::OpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, std::move(f));
}

void FileManagerService::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest* request, ::Mira::Rpc::FileManager::OpenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::OpenResponse>* FileManagerService::Stub::PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Mira::Rpc::FileManager::OpenResponse, ::Mira::Rpc::FileManager::OpenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Open_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::OpenResponse>* FileManagerService::Stub::AsyncOpenRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileManagerService::Stub::Close(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::Mira::Rpc::FileManager::CloseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Mira::Rpc::FileManager::CloseRequest, ::Mira::Rpc::FileManager::CloseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Close_, context, request, response);
}

void FileManagerService::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest* request, ::Mira::Rpc::FileManager::CloseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Mira::Rpc::FileManager::CloseRequest, ::Mira::Rpc::FileManager::CloseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, std::move(f));
}

void FileManagerService::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest* request, ::Mira::Rpc::FileManager::CloseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::CloseResponse>* FileManagerService::Stub::PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Mira::Rpc::FileManager::CloseResponse, ::Mira::Rpc::FileManager::CloseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Close_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::CloseResponse>* FileManagerService::Stub::AsyncCloseRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::CloseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::Mira::Rpc::FileManager::ReadResponse>* FileManagerService::Stub::ReadRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::Mira::Rpc::FileManager::ReadResponse>::Create(channel_.get(), rpcmethod_Read_, context, request);
}

void FileManagerService::Stub::experimental_async::Read(::grpc::ClientContext* context, ::Mira::Rpc::FileManager::ReadRequest* request, ::grpc::experimental::ClientReadReactor< ::Mira::Rpc::FileManager::ReadResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Mira::Rpc::FileManager::ReadResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ReadResponse>* FileManagerService::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Mira::Rpc::FileManager::ReadResponse>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ReadResponse>* FileManagerService::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Mira::Rpc::FileManager::ReadResponse>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, false, nullptr);
}

::grpc::ClientReader< ::Mira::Rpc::FileManager::ListResponse>* FileManagerService::Stub::ListRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::Mira::Rpc::FileManager::ListResponse>::Create(channel_.get(), rpcmethod_List_, context, request);
}

void FileManagerService::Stub::experimental_async::List(::grpc::ClientContext* context, ::Mira::Rpc::FileManager::ListRequest* request, ::grpc::experimental::ClientReadReactor< ::Mira::Rpc::FileManager::ListResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Mira::Rpc::FileManager::ListResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ListResponse>* FileManagerService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Mira::Rpc::FileManager::ListResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Mira::Rpc::FileManager::ListResponse>* FileManagerService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Mira::Rpc::FileManager::ListResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false, nullptr);
}

::grpc::Status FileManagerService::Stub::Stat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::Mira::Rpc::FileManager::StatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Mira::Rpc::FileManager::StatRequest, ::Mira::Rpc::FileManager::StatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stat_, context, request, response);
}

void FileManagerService::Stub::experimental_async::Stat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest* request, ::Mira::Rpc::FileManager::StatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Mira::Rpc::FileManager::StatRequest, ::Mira::Rpc::FileManager::StatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stat_, context, request, response, std::move(f));
}

void FileManagerService::Stub::experimental_async::Stat(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest* request, ::Mira::Rpc::FileManager::StatResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::StatResponse>* FileManagerService::Stub::PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Mira::Rpc::FileManager::StatResponse, ::Mira::Rpc::FileManager::StatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::StatResponse>* FileManagerService::Stub::AsyncStatRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::StatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileManagerService::Stub::Mkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::Mira::Rpc::FileManager::MkdirResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Mira::Rpc::FileManager::MkdirRequest, ::Mira::Rpc::FileManager::MkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Mkdir_, context, request, response);
}

void FileManagerService::Stub::experimental_async::Mkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest* request, ::Mira::Rpc::FileManager::MkdirResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Mira::Rpc::FileManager::MkdirRequest, ::Mira::Rpc::FileManager::MkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mkdir_, context, request, response, std::move(f));
}

void FileManagerService::Stub::experimental_async::Mkdir(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest* request, ::Mira::Rpc::FileManager::MkdirResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mkdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::MkdirResponse>* FileManagerService::Stub::PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Mira::Rpc::FileManager::MkdirResponse, ::Mira::Rpc::FileManager::MkdirRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Mkdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Mira::Rpc::FileManager::MkdirResponse>* FileManagerService::Stub::AsyncMkdirRaw(::grpc::ClientContext* context, const ::Mira::Rpc::FileManager::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMkdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

FileManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileManagerService::Service, ::Mira::Rpc::FileManager::EchoRequest, ::Mira::Rpc::FileManager::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Mira::Rpc::FileManager::EchoRequest* req,
             ::Mira::Rpc::FileManager::EmptyReply* resp) {
               return service->Echo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileManagerService::Service, ::Mira::Rpc::FileManager::OpenRequest, ::Mira::Rpc::FileManager::OpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Mira::Rpc::FileManager::OpenRequest* req,
             ::Mira::Rpc::FileManager::OpenResponse* resp) {
               return service->Open(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileManagerService::Service, ::Mira::Rpc::FileManager::CloseRequest, ::Mira::Rpc::FileManager::CloseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Mira::Rpc::FileManager::CloseRequest* req,
             ::Mira::Rpc::FileManager::CloseResponse* resp) {
               return service->Close(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileManagerService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileManagerService::Service, ::Mira::Rpc::FileManager::ReadRequest, ::Mira::Rpc::FileManager::ReadResponse>(
          [](FileManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Mira::Rpc::FileManager::ReadRequest* req,
             ::grpc::ServerWriter<::Mira::Rpc::FileManager::ReadResponse>* writer) {
               return service->Read(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileManagerService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileManagerService::Service, ::Mira::Rpc::FileManager::ListRequest, ::Mira::Rpc::FileManager::ListResponse>(
          [](FileManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Mira::Rpc::FileManager::ListRequest* req,
             ::grpc::ServerWriter<::Mira::Rpc::FileManager::ListResponse>* writer) {
               return service->List(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileManagerService::Service, ::Mira::Rpc::FileManager::StatRequest, ::Mira::Rpc::FileManager::StatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Mira::Rpc::FileManager::StatRequest* req,
             ::Mira::Rpc::FileManager::StatResponse* resp) {
               return service->Stat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileManagerService::Service, ::Mira::Rpc::FileManager::MkdirRequest, ::Mira::Rpc::FileManager::MkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Mira::Rpc::FileManager::MkdirRequest* req,
             ::Mira::Rpc::FileManager::MkdirResponse* resp) {
               return service->Mkdir(ctx, req, resp);
             }, this)));
}

FileManagerService::Service::~Service() {
}

::grpc::Status FileManagerService::Service::Echo(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::EchoRequest* request, ::Mira::Rpc::FileManager::EmptyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileManagerService::Service::Open(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::OpenRequest* request, ::Mira::Rpc::FileManager::OpenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileManagerService::Service::Close(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::CloseRequest* request, ::Mira::Rpc::FileManager::CloseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileManagerService::Service::Read(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::ReadRequest* request, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ReadResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileManagerService::Service::List(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::ListRequest* request, ::grpc::ServerWriter< ::Mira::Rpc::FileManager::ListResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileManagerService::Service::Stat(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::StatRequest* request, ::Mira::Rpc::FileManager::StatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileManagerService::Service::Mkdir(::grpc::ServerContext* context, const ::Mira::Rpc::FileManager::MkdirRequest* request, ::Mira::Rpc::FileManager::MkdirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Mira
}  // namespace Rpc
}  // namespace FileManager

