// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Orbis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Orbis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Orbis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Orbis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Orbis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Orbis_2eproto;
namespace Mira {
namespace Rpc {
namespace Orbis {
class DecryptPupRequest;
class DecryptPupRequestDefaultTypeInternal;
extern DecryptPupRequestDefaultTypeInternal _DecryptPupRequest_default_instance_;
class DecryptPupResponse;
class DecryptPupResponseDefaultTypeInternal;
extern DecryptPupResponseDefaultTypeInternal _DecryptPupResponse_default_instance_;
class DecryptSelfRequest;
class DecryptSelfRequestDefaultTypeInternal;
extern DecryptSelfRequestDefaultTypeInternal _DecryptSelfRequest_default_instance_;
class DecryptSelfResponse;
class DecryptSelfResponseDefaultTypeInternal;
extern DecryptSelfResponseDefaultTypeInternal _DecryptSelfResponse_default_instance_;
}  // namespace Orbis
}  // namespace Rpc
}  // namespace Mira
PROTOBUF_NAMESPACE_OPEN
template<> ::Mira::Rpc::Orbis::DecryptPupRequest* Arena::CreateMaybeMessage<::Mira::Rpc::Orbis::DecryptPupRequest>(Arena*);
template<> ::Mira::Rpc::Orbis::DecryptPupResponse* Arena::CreateMaybeMessage<::Mira::Rpc::Orbis::DecryptPupResponse>(Arena*);
template<> ::Mira::Rpc::Orbis::DecryptSelfRequest* Arena::CreateMaybeMessage<::Mira::Rpc::Orbis::DecryptSelfRequest>(Arena*);
template<> ::Mira::Rpc::Orbis::DecryptSelfResponse* Arena::CreateMaybeMessage<::Mira::Rpc::Orbis::DecryptSelfResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Mira {
namespace Rpc {
namespace Orbis {

// ===================================================================

class DecryptSelfRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.Orbis.DecryptSelfRequest) */ {
 public:
  inline DecryptSelfRequest() : DecryptSelfRequest(nullptr) {}
  virtual ~DecryptSelfRequest();

  DecryptSelfRequest(const DecryptSelfRequest& from);
  DecryptSelfRequest(DecryptSelfRequest&& from) noexcept
    : DecryptSelfRequest() {
    *this = ::std::move(from);
  }

  inline DecryptSelfRequest& operator=(const DecryptSelfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecryptSelfRequest& operator=(DecryptSelfRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecryptSelfRequest& default_instance();

  static inline const DecryptSelfRequest* internal_default_instance() {
    return reinterpret_cast<const DecryptSelfRequest*>(
               &_DecryptSelfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DecryptSelfRequest& a, DecryptSelfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DecryptSelfRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecryptSelfRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecryptSelfRequest* New() const final {
    return CreateMaybeMessage<DecryptSelfRequest>(nullptr);
  }

  DecryptSelfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecryptSelfRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecryptSelfRequest& from);
  void MergeFrom(const DecryptSelfRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecryptSelfRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.Orbis.DecryptSelfRequest";
  }
  protected:
  explicit DecryptSelfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Orbis_2eproto);
    return ::descriptor_table_Orbis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.Orbis.DecryptSelfRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Orbis_2eproto;
};
// -------------------------------------------------------------------

class DecryptSelfResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.Orbis.DecryptSelfResponse) */ {
 public:
  inline DecryptSelfResponse() : DecryptSelfResponse(nullptr) {}
  virtual ~DecryptSelfResponse();

  DecryptSelfResponse(const DecryptSelfResponse& from);
  DecryptSelfResponse(DecryptSelfResponse&& from) noexcept
    : DecryptSelfResponse() {
    *this = ::std::move(from);
  }

  inline DecryptSelfResponse& operator=(const DecryptSelfResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecryptSelfResponse& operator=(DecryptSelfResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecryptSelfResponse& default_instance();

  static inline const DecryptSelfResponse* internal_default_instance() {
    return reinterpret_cast<const DecryptSelfResponse*>(
               &_DecryptSelfResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DecryptSelfResponse& a, DecryptSelfResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DecryptSelfResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecryptSelfResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecryptSelfResponse* New() const final {
    return CreateMaybeMessage<DecryptSelfResponse>(nullptr);
  }

  DecryptSelfResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecryptSelfResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecryptSelfResponse& from);
  void MergeFrom(const DecryptSelfResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecryptSelfResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.Orbis.DecryptSelfResponse";
  }
  protected:
  explicit DecryptSelfResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Orbis_2eproto);
    return ::descriptor_table_Orbis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kOffsetFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.Orbis.DecryptSelfResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Orbis_2eproto;
};
// -------------------------------------------------------------------

class DecryptPupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.Orbis.DecryptPupRequest) */ {
 public:
  inline DecryptPupRequest() : DecryptPupRequest(nullptr) {}
  virtual ~DecryptPupRequest();

  DecryptPupRequest(const DecryptPupRequest& from);
  DecryptPupRequest(DecryptPupRequest&& from) noexcept
    : DecryptPupRequest() {
    *this = ::std::move(from);
  }

  inline DecryptPupRequest& operator=(const DecryptPupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecryptPupRequest& operator=(DecryptPupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecryptPupRequest& default_instance();

  static inline const DecryptPupRequest* internal_default_instance() {
    return reinterpret_cast<const DecryptPupRequest*>(
               &_DecryptPupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DecryptPupRequest& a, DecryptPupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DecryptPupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecryptPupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecryptPupRequest* New() const final {
    return CreateMaybeMessage<DecryptPupRequest>(nullptr);
  }

  DecryptPupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecryptPupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecryptPupRequest& from);
  void MergeFrom(const DecryptPupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecryptPupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.Orbis.DecryptPupRequest";
  }
  protected:
  explicit DecryptPupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Orbis_2eproto);
    return ::descriptor_table_Orbis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.Orbis.DecryptPupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Orbis_2eproto;
};
// -------------------------------------------------------------------

class DecryptPupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.Orbis.DecryptPupResponse) */ {
 public:
  inline DecryptPupResponse() : DecryptPupResponse(nullptr) {}
  virtual ~DecryptPupResponse();

  DecryptPupResponse(const DecryptPupResponse& from);
  DecryptPupResponse(DecryptPupResponse&& from) noexcept
    : DecryptPupResponse() {
    *this = ::std::move(from);
  }

  inline DecryptPupResponse& operator=(const DecryptPupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecryptPupResponse& operator=(DecryptPupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecryptPupResponse& default_instance();

  static inline const DecryptPupResponse* internal_default_instance() {
    return reinterpret_cast<const DecryptPupResponse*>(
               &_DecryptPupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DecryptPupResponse& a, DecryptPupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DecryptPupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecryptPupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecryptPupResponse* New() const final {
    return CreateMaybeMessage<DecryptPupResponse>(nullptr);
  }

  DecryptPupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecryptPupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecryptPupResponse& from);
  void MergeFrom(const DecryptPupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecryptPupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.Orbis.DecryptPupResponse";
  }
  protected:
  explicit DecryptPupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Orbis_2eproto);
    return ::descriptor_table_Orbis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kOffsetFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.Orbis.DecryptPupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Orbis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DecryptSelfRequest

// string path = 1;
inline void DecryptSelfRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& DecryptSelfRequest::path() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.Orbis.DecryptSelfRequest.path)
  return _internal_path();
}
inline void DecryptSelfRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.Orbis.DecryptSelfRequest.path)
}
inline std::string* DecryptSelfRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.Orbis.DecryptSelfRequest.path)
  return _internal_mutable_path();
}
inline const std::string& DecryptSelfRequest::_internal_path() const {
  return path_.Get();
}
inline void DecryptSelfRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DecryptSelfRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.Orbis.DecryptSelfRequest.path)
}
inline void DecryptSelfRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.Orbis.DecryptSelfRequest.path)
}
inline void DecryptSelfRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.Orbis.DecryptSelfRequest.path)
}
inline std::string* DecryptSelfRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DecryptSelfRequest::release_path() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.Orbis.DecryptSelfRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DecryptSelfRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.Orbis.DecryptSelfRequest.path)
}

// -------------------------------------------------------------------

// DecryptSelfResponse

// int32 error = 1;
inline void DecryptSelfResponse::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecryptSelfResponse::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecryptSelfResponse::error() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.Orbis.DecryptSelfResponse.error)
  return _internal_error();
}
inline void DecryptSelfResponse::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void DecryptSelfResponse::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.Orbis.DecryptSelfResponse.error)
}

// uint64 offset = 2;
inline void DecryptSelfResponse::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DecryptSelfResponse::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DecryptSelfResponse::offset() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.Orbis.DecryptSelfResponse.offset)
  return _internal_offset();
}
inline void DecryptSelfResponse::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void DecryptSelfResponse::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.Orbis.DecryptSelfResponse.offset)
}

// bytes data = 3;
inline void DecryptSelfResponse::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& DecryptSelfResponse::data() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.Orbis.DecryptSelfResponse.data)
  return _internal_data();
}
inline void DecryptSelfResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.Orbis.DecryptSelfResponse.data)
}
inline std::string* DecryptSelfResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.Orbis.DecryptSelfResponse.data)
  return _internal_mutable_data();
}
inline const std::string& DecryptSelfResponse::_internal_data() const {
  return data_.Get();
}
inline void DecryptSelfResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DecryptSelfResponse::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.Orbis.DecryptSelfResponse.data)
}
inline void DecryptSelfResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.Orbis.DecryptSelfResponse.data)
}
inline void DecryptSelfResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.Orbis.DecryptSelfResponse.data)
}
inline std::string* DecryptSelfResponse::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DecryptSelfResponse::release_data() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.Orbis.DecryptSelfResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DecryptSelfResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.Orbis.DecryptSelfResponse.data)
}

// -------------------------------------------------------------------

// DecryptPupRequest

// string path = 1;
inline void DecryptPupRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& DecryptPupRequest::path() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.Orbis.DecryptPupRequest.path)
  return _internal_path();
}
inline void DecryptPupRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.Orbis.DecryptPupRequest.path)
}
inline std::string* DecryptPupRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.Orbis.DecryptPupRequest.path)
  return _internal_mutable_path();
}
inline const std::string& DecryptPupRequest::_internal_path() const {
  return path_.Get();
}
inline void DecryptPupRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DecryptPupRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.Orbis.DecryptPupRequest.path)
}
inline void DecryptPupRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.Orbis.DecryptPupRequest.path)
}
inline void DecryptPupRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.Orbis.DecryptPupRequest.path)
}
inline std::string* DecryptPupRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DecryptPupRequest::release_path() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.Orbis.DecryptPupRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DecryptPupRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.Orbis.DecryptPupRequest.path)
}

// -------------------------------------------------------------------

// DecryptPupResponse

// int32 error = 1;
inline void DecryptPupResponse::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecryptPupResponse::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecryptPupResponse::error() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.Orbis.DecryptPupResponse.error)
  return _internal_error();
}
inline void DecryptPupResponse::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void DecryptPupResponse::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.Orbis.DecryptPupResponse.error)
}

// uint64 offset = 2;
inline void DecryptPupResponse::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DecryptPupResponse::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DecryptPupResponse::offset() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.Orbis.DecryptPupResponse.offset)
  return _internal_offset();
}
inline void DecryptPupResponse::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void DecryptPupResponse::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.Orbis.DecryptPupResponse.offset)
}

// bytes data = 3;
inline void DecryptPupResponse::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& DecryptPupResponse::data() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.Orbis.DecryptPupResponse.data)
  return _internal_data();
}
inline void DecryptPupResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.Orbis.DecryptPupResponse.data)
}
inline std::string* DecryptPupResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.Orbis.DecryptPupResponse.data)
  return _internal_mutable_data();
}
inline const std::string& DecryptPupResponse::_internal_data() const {
  return data_.Get();
}
inline void DecryptPupResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DecryptPupResponse::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.Orbis.DecryptPupResponse.data)
}
inline void DecryptPupResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.Orbis.DecryptPupResponse.data)
}
inline void DecryptPupResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.Orbis.DecryptPupResponse.data)
}
inline std::string* DecryptPupResponse::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DecryptPupResponse::release_data() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.Orbis.DecryptPupResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DecryptPupResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.Orbis.DecryptPupResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Orbis
}  // namespace Rpc
}  // namespace Mira

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Orbis_2eproto
