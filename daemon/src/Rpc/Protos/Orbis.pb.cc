// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Orbis.proto

#include "Orbis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Mira {
namespace Rpc {
namespace Orbis {
class DecryptSelfRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecryptSelfRequest> _instance;
} _DecryptSelfRequest_default_instance_;
class DecryptSelfResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecryptSelfResponse> _instance;
} _DecryptSelfResponse_default_instance_;
class DecryptPupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecryptPupRequest> _instance;
} _DecryptPupRequest_default_instance_;
class DecryptPupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecryptPupResponse> _instance;
} _DecryptPupResponse_default_instance_;
}  // namespace Orbis
}  // namespace Rpc
}  // namespace Mira
static void InitDefaultsscc_info_DecryptPupRequest_Orbis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mira::Rpc::Orbis::_DecryptPupRequest_default_instance_;
    new (ptr) ::Mira::Rpc::Orbis::DecryptPupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecryptPupRequest_Orbis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DecryptPupRequest_Orbis_2eproto}, {}};

static void InitDefaultsscc_info_DecryptPupResponse_Orbis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mira::Rpc::Orbis::_DecryptPupResponse_default_instance_;
    new (ptr) ::Mira::Rpc::Orbis::DecryptPupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecryptPupResponse_Orbis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DecryptPupResponse_Orbis_2eproto}, {}};

static void InitDefaultsscc_info_DecryptSelfRequest_Orbis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mira::Rpc::Orbis::_DecryptSelfRequest_default_instance_;
    new (ptr) ::Mira::Rpc::Orbis::DecryptSelfRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecryptSelfRequest_Orbis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DecryptSelfRequest_Orbis_2eproto}, {}};

static void InitDefaultsscc_info_DecryptSelfResponse_Orbis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mira::Rpc::Orbis::_DecryptSelfResponse_default_instance_;
    new (ptr) ::Mira::Rpc::Orbis::DecryptSelfResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecryptSelfResponse_Orbis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DecryptSelfResponse_Orbis_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Orbis_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Orbis_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Orbis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Orbis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptSelfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptSelfRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptSelfResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptSelfResponse, error_),
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptSelfResponse, offset_),
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptSelfResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptPupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptPupRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptPupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptPupResponse, error_),
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptPupResponse, offset_),
  PROTOBUF_FIELD_OFFSET(::Mira::Rpc::Orbis::DecryptPupResponse, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Mira::Rpc::Orbis::DecryptSelfRequest)},
  { 6, -1, sizeof(::Mira::Rpc::Orbis::DecryptSelfResponse)},
  { 14, -1, sizeof(::Mira::Rpc::Orbis::DecryptPupRequest)},
  { 20, -1, sizeof(::Mira::Rpc::Orbis::DecryptPupResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mira::Rpc::Orbis::_DecryptSelfRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mira::Rpc::Orbis::_DecryptSelfResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mira::Rpc::Orbis::_DecryptPupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mira::Rpc::Orbis::_DecryptPupResponse_default_instance_),
};

const char descriptor_table_protodef_Orbis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Orbis.proto\022\016Mira.Rpc.Orbis\"\"\n\022Decrypt"
  "SelfRequest\022\014\n\004path\030\001 \001(\t\"B\n\023DecryptSelf"
  "Response\022\r\n\005error\030\001 \001(\005\022\016\n\006offset\030\002 \001(\004\022"
  "\014\n\004data\030\003 \001(\014\"!\n\021DecryptPupRequest\022\014\n\004pa"
  "th\030\001 \001(\t\"A\n\022DecryptPupResponse\022\r\n\005error\030"
  "\001 \001(\005\022\016\n\006offset\030\002 \001(\004\022\014\n\004data\030\003 \001(\0142\277\001\n\014"
  "OrbisService\022X\n\013DecryptSelf\022\".Mira.Rpc.O"
  "rbis.DecryptSelfRequest\032#.Mira.Rpc.Orbis"
  ".DecryptSelfResponse0\001\022U\n\nDecryptPup\022!.M"
  "ira.Rpc.Orbis.DecryptPupRequest\032\".Mira.R"
  "pc.Orbis.DecryptPupResponse0\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Orbis_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Orbis_2eproto_sccs[4] = {
  &scc_info_DecryptPupRequest_Orbis_2eproto.base,
  &scc_info_DecryptPupResponse_Orbis_2eproto.base,
  &scc_info_DecryptSelfRequest_Orbis_2eproto.base,
  &scc_info_DecryptSelfResponse_Orbis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Orbis_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Orbis_2eproto = {
  false, false, descriptor_table_protodef_Orbis_2eproto, "Orbis.proto", 437,
  &descriptor_table_Orbis_2eproto_once, descriptor_table_Orbis_2eproto_sccs, descriptor_table_Orbis_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_Orbis_2eproto::offsets,
  file_level_metadata_Orbis_2eproto, 4, file_level_enum_descriptors_Orbis_2eproto, file_level_service_descriptors_Orbis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Orbis_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Orbis_2eproto)), true);
namespace Mira {
namespace Rpc {
namespace Orbis {

// ===================================================================

class DecryptSelfRequest::_Internal {
 public:
};

DecryptSelfRequest::DecryptSelfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Mira.Rpc.Orbis.DecryptSelfRequest)
}
DecryptSelfRequest::DecryptSelfRequest(const DecryptSelfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Mira.Rpc.Orbis.DecryptSelfRequest)
}

void DecryptSelfRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecryptSelfRequest_Orbis_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DecryptSelfRequest::~DecryptSelfRequest() {
  // @@protoc_insertion_point(destructor:Mira.Rpc.Orbis.DecryptSelfRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DecryptSelfRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecryptSelfRequest::ArenaDtor(void* object) {
  DecryptSelfRequest* _this = reinterpret_cast< DecryptSelfRequest* >(object);
  (void)_this;
}
void DecryptSelfRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecryptSelfRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecryptSelfRequest& DecryptSelfRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecryptSelfRequest_Orbis_2eproto.base);
  return *internal_default_instance();
}


void DecryptSelfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Mira.Rpc.Orbis.DecryptSelfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecryptSelfRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Mira.Rpc.Orbis.DecryptSelfRequest.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecryptSelfRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mira.Rpc.Orbis.DecryptSelfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Mira.Rpc.Orbis.DecryptSelfRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mira.Rpc.Orbis.DecryptSelfRequest)
  return target;
}

size_t DecryptSelfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mira.Rpc.Orbis.DecryptSelfRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecryptSelfRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mira.Rpc.Orbis.DecryptSelfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DecryptSelfRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecryptSelfRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mira.Rpc.Orbis.DecryptSelfRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mira.Rpc.Orbis.DecryptSelfRequest)
    MergeFrom(*source);
  }
}

void DecryptSelfRequest::MergeFrom(const DecryptSelfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mira.Rpc.Orbis.DecryptSelfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void DecryptSelfRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mira.Rpc.Orbis.DecryptSelfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecryptSelfRequest::CopyFrom(const DecryptSelfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mira.Rpc.Orbis.DecryptSelfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptSelfRequest::IsInitialized() const {
  return true;
}

void DecryptSelfRequest::InternalSwap(DecryptSelfRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DecryptSelfRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DecryptSelfResponse::_Internal {
 public:
};

DecryptSelfResponse::DecryptSelfResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Mira.Rpc.Orbis.DecryptSelfResponse)
}
DecryptSelfResponse::DecryptSelfResponse(const DecryptSelfResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:Mira.Rpc.Orbis.DecryptSelfResponse)
}

void DecryptSelfResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecryptSelfResponse_Orbis_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(error_));
}

DecryptSelfResponse::~DecryptSelfResponse() {
  // @@protoc_insertion_point(destructor:Mira.Rpc.Orbis.DecryptSelfResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DecryptSelfResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecryptSelfResponse::ArenaDtor(void* object) {
  DecryptSelfResponse* _this = reinterpret_cast< DecryptSelfResponse* >(object);
  (void)_this;
}
void DecryptSelfResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecryptSelfResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecryptSelfResponse& DecryptSelfResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecryptSelfResponse_Orbis_2eproto.base);
  return *internal_default_instance();
}


void DecryptSelfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Mira.Rpc.Orbis.DecryptSelfResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecryptSelfResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecryptSelfResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mira.Rpc.Orbis.DecryptSelfResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mira.Rpc.Orbis.DecryptSelfResponse)
  return target;
}

size_t DecryptSelfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mira.Rpc.Orbis.DecryptSelfResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecryptSelfResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mira.Rpc.Orbis.DecryptSelfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DecryptSelfResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecryptSelfResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mira.Rpc.Orbis.DecryptSelfResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mira.Rpc.Orbis.DecryptSelfResponse)
    MergeFrom(*source);
  }
}

void DecryptSelfResponse::MergeFrom(const DecryptSelfResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mira.Rpc.Orbis.DecryptSelfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void DecryptSelfResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mira.Rpc.Orbis.DecryptSelfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecryptSelfResponse::CopyFrom(const DecryptSelfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mira.Rpc.Orbis.DecryptSelfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptSelfResponse::IsInitialized() const {
  return true;
}

void DecryptSelfResponse::InternalSwap(DecryptSelfResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecryptSelfResponse, error_)
      + sizeof(DecryptSelfResponse::error_)
      - PROTOBUF_FIELD_OFFSET(DecryptSelfResponse, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecryptSelfResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DecryptPupRequest::_Internal {
 public:
};

DecryptPupRequest::DecryptPupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Mira.Rpc.Orbis.DecryptPupRequest)
}
DecryptPupRequest::DecryptPupRequest(const DecryptPupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Mira.Rpc.Orbis.DecryptPupRequest)
}

void DecryptPupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecryptPupRequest_Orbis_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DecryptPupRequest::~DecryptPupRequest() {
  // @@protoc_insertion_point(destructor:Mira.Rpc.Orbis.DecryptPupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DecryptPupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecryptPupRequest::ArenaDtor(void* object) {
  DecryptPupRequest* _this = reinterpret_cast< DecryptPupRequest* >(object);
  (void)_this;
}
void DecryptPupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecryptPupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecryptPupRequest& DecryptPupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecryptPupRequest_Orbis_2eproto.base);
  return *internal_default_instance();
}


void DecryptPupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Mira.Rpc.Orbis.DecryptPupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecryptPupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Mira.Rpc.Orbis.DecryptPupRequest.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecryptPupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mira.Rpc.Orbis.DecryptPupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Mira.Rpc.Orbis.DecryptPupRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mira.Rpc.Orbis.DecryptPupRequest)
  return target;
}

size_t DecryptPupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mira.Rpc.Orbis.DecryptPupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecryptPupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mira.Rpc.Orbis.DecryptPupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DecryptPupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecryptPupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mira.Rpc.Orbis.DecryptPupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mira.Rpc.Orbis.DecryptPupRequest)
    MergeFrom(*source);
  }
}

void DecryptPupRequest::MergeFrom(const DecryptPupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mira.Rpc.Orbis.DecryptPupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void DecryptPupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mira.Rpc.Orbis.DecryptPupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecryptPupRequest::CopyFrom(const DecryptPupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mira.Rpc.Orbis.DecryptPupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptPupRequest::IsInitialized() const {
  return true;
}

void DecryptPupRequest::InternalSwap(DecryptPupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DecryptPupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DecryptPupResponse::_Internal {
 public:
};

DecryptPupResponse::DecryptPupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Mira.Rpc.Orbis.DecryptPupResponse)
}
DecryptPupResponse::DecryptPupResponse(const DecryptPupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:Mira.Rpc.Orbis.DecryptPupResponse)
}

void DecryptPupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecryptPupResponse_Orbis_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(error_));
}

DecryptPupResponse::~DecryptPupResponse() {
  // @@protoc_insertion_point(destructor:Mira.Rpc.Orbis.DecryptPupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DecryptPupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecryptPupResponse::ArenaDtor(void* object) {
  DecryptPupResponse* _this = reinterpret_cast< DecryptPupResponse* >(object);
  (void)_this;
}
void DecryptPupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecryptPupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecryptPupResponse& DecryptPupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecryptPupResponse_Orbis_2eproto.base);
  return *internal_default_instance();
}


void DecryptPupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Mira.Rpc.Orbis.DecryptPupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecryptPupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecryptPupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mira.Rpc.Orbis.DecryptPupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mira.Rpc.Orbis.DecryptPupResponse)
  return target;
}

size_t DecryptPupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mira.Rpc.Orbis.DecryptPupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecryptPupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mira.Rpc.Orbis.DecryptPupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DecryptPupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecryptPupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mira.Rpc.Orbis.DecryptPupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mira.Rpc.Orbis.DecryptPupResponse)
    MergeFrom(*source);
  }
}

void DecryptPupResponse::MergeFrom(const DecryptPupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mira.Rpc.Orbis.DecryptPupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void DecryptPupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mira.Rpc.Orbis.DecryptPupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecryptPupResponse::CopyFrom(const DecryptPupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mira.Rpc.Orbis.DecryptPupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptPupResponse::IsInitialized() const {
  return true;
}

void DecryptPupResponse::InternalSwap(DecryptPupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecryptPupResponse, error_)
      + sizeof(DecryptPupResponse::error_)
      - PROTOBUF_FIELD_OFFSET(DecryptPupResponse, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecryptPupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Orbis
}  // namespace Rpc
}  // namespace Mira
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Mira::Rpc::Orbis::DecryptSelfRequest* Arena::CreateMaybeMessage< ::Mira::Rpc::Orbis::DecryptSelfRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mira::Rpc::Orbis::DecryptSelfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Mira::Rpc::Orbis::DecryptSelfResponse* Arena::CreateMaybeMessage< ::Mira::Rpc::Orbis::DecryptSelfResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mira::Rpc::Orbis::DecryptSelfResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Mira::Rpc::Orbis::DecryptPupRequest* Arena::CreateMaybeMessage< ::Mira::Rpc::Orbis::DecryptPupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mira::Rpc::Orbis::DecryptPupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Mira::Rpc::Orbis::DecryptPupResponse* Arena::CreateMaybeMessage< ::Mira::Rpc::Orbis::DecryptPupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mira::Rpc::Orbis::DecryptPupResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
