// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileManager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FileManager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FileManager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FileManager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FileManager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FileManager_2eproto;
namespace Mira {
namespace Rpc {
namespace FileManager {
class CloseRequest;
class CloseRequestDefaultTypeInternal;
extern CloseRequestDefaultTypeInternal _CloseRequest_default_instance_;
class CloseResponse;
class CloseResponseDefaultTypeInternal;
extern CloseResponseDefaultTypeInternal _CloseResponse_default_instance_;
class EchoRequest;
class EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class EmptyReply;
class EmptyReplyDefaultTypeInternal;
extern EmptyReplyDefaultTypeInternal _EmptyReply_default_instance_;
class ListEntry;
class ListEntryDefaultTypeInternal;
extern ListEntryDefaultTypeInternal _ListEntry_default_instance_;
class ListRequest;
class ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class ListResponse;
class ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
class MkdirRequest;
class MkdirRequestDefaultTypeInternal;
extern MkdirRequestDefaultTypeInternal _MkdirRequest_default_instance_;
class MkdirResponse;
class MkdirResponseDefaultTypeInternal;
extern MkdirResponseDefaultTypeInternal _MkdirResponse_default_instance_;
class OpenRequest;
class OpenRequestDefaultTypeInternal;
extern OpenRequestDefaultTypeInternal _OpenRequest_default_instance_;
class OpenResponse;
class OpenResponseDefaultTypeInternal;
extern OpenResponseDefaultTypeInternal _OpenResponse_default_instance_;
class ReadRequest;
class ReadRequestDefaultTypeInternal;
extern ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
class ReadResponse;
class ReadResponseDefaultTypeInternal;
extern ReadResponseDefaultTypeInternal _ReadResponse_default_instance_;
class RmdirRequest;
class RmdirRequestDefaultTypeInternal;
extern RmdirRequestDefaultTypeInternal _RmdirRequest_default_instance_;
class RmdirResponse;
class RmdirResponseDefaultTypeInternal;
extern RmdirResponseDefaultTypeInternal _RmdirResponse_default_instance_;
class SeekRequest;
class SeekRequestDefaultTypeInternal;
extern SeekRequestDefaultTypeInternal _SeekRequest_default_instance_;
class SeekResponse;
class SeekResponseDefaultTypeInternal;
extern SeekResponseDefaultTypeInternal _SeekResponse_default_instance_;
class StatRequest;
class StatRequestDefaultTypeInternal;
extern StatRequestDefaultTypeInternal _StatRequest_default_instance_;
class StatResponse;
class StatResponseDefaultTypeInternal;
extern StatResponseDefaultTypeInternal _StatResponse_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class UnlinkRequest;
class UnlinkRequestDefaultTypeInternal;
extern UnlinkRequestDefaultTypeInternal _UnlinkRequest_default_instance_;
class UnlinkResponse;
class UnlinkResponseDefaultTypeInternal;
extern UnlinkResponseDefaultTypeInternal _UnlinkResponse_default_instance_;
class WriteRequest;
class WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
class WriteResponse;
class WriteResponseDefaultTypeInternal;
extern WriteResponseDefaultTypeInternal _WriteResponse_default_instance_;
}  // namespace FileManager
}  // namespace Rpc
}  // namespace Mira
PROTOBUF_NAMESPACE_OPEN
template<> ::Mira::Rpc::FileManager::CloseRequest* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::CloseRequest>(Arena*);
template<> ::Mira::Rpc::FileManager::CloseResponse* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::CloseResponse>(Arena*);
template<> ::Mira::Rpc::FileManager::EchoRequest* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::EchoRequest>(Arena*);
template<> ::Mira::Rpc::FileManager::EmptyReply* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::EmptyReply>(Arena*);
template<> ::Mira::Rpc::FileManager::ListEntry* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::ListEntry>(Arena*);
template<> ::Mira::Rpc::FileManager::ListRequest* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::ListRequest>(Arena*);
template<> ::Mira::Rpc::FileManager::ListResponse* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::ListResponse>(Arena*);
template<> ::Mira::Rpc::FileManager::MkdirRequest* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::MkdirRequest>(Arena*);
template<> ::Mira::Rpc::FileManager::MkdirResponse* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::MkdirResponse>(Arena*);
template<> ::Mira::Rpc::FileManager::OpenRequest* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::OpenRequest>(Arena*);
template<> ::Mira::Rpc::FileManager::OpenResponse* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::OpenResponse>(Arena*);
template<> ::Mira::Rpc::FileManager::ReadRequest* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::ReadRequest>(Arena*);
template<> ::Mira::Rpc::FileManager::ReadResponse* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::ReadResponse>(Arena*);
template<> ::Mira::Rpc::FileManager::RmdirRequest* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::RmdirRequest>(Arena*);
template<> ::Mira::Rpc::FileManager::RmdirResponse* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::RmdirResponse>(Arena*);
template<> ::Mira::Rpc::FileManager::SeekRequest* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::SeekRequest>(Arena*);
template<> ::Mira::Rpc::FileManager::SeekResponse* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::SeekResponse>(Arena*);
template<> ::Mira::Rpc::FileManager::StatRequest* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::StatRequest>(Arena*);
template<> ::Mira::Rpc::FileManager::StatResponse* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::StatResponse>(Arena*);
template<> ::Mira::Rpc::FileManager::Time* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::Time>(Arena*);
template<> ::Mira::Rpc::FileManager::UnlinkRequest* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::UnlinkRequest>(Arena*);
template<> ::Mira::Rpc::FileManager::UnlinkResponse* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::UnlinkResponse>(Arena*);
template<> ::Mira::Rpc::FileManager::WriteRequest* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::WriteRequest>(Arena*);
template<> ::Mira::Rpc::FileManager::WriteResponse* Arena::CreateMaybeMessage<::Mira::Rpc::FileManager::WriteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Mira {
namespace Rpc {
namespace FileManager {

enum ListTypes : int {
  BLOCK_DEVICE = 0,
  CHARACTER_DEVICE = 1,
  DIRECTORY = 2,
  NAMED_PIPE = 3,
  SYMBOLIC_LINK = 4,
  REGULAR = 5,
  SOCKET = 6,
  UNKNOWN = 7,
  ListTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ListTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ListTypes_IsValid(int value);
constexpr ListTypes ListTypes_MIN = BLOCK_DEVICE;
constexpr ListTypes ListTypes_MAX = UNKNOWN;
constexpr int ListTypes_ARRAYSIZE = ListTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListTypes_descriptor();
template<typename T>
inline const std::string& ListTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ListTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ListTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ListTypes_descriptor(), enum_t_value);
}
inline bool ListTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ListTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ListTypes>(
    ListTypes_descriptor(), name, value);
}
// ===================================================================

class EmptyReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.EmptyReply) */ {
 public:
  inline EmptyReply() : EmptyReply(nullptr) {}
  virtual ~EmptyReply();

  EmptyReply(const EmptyReply& from);
  EmptyReply(EmptyReply&& from) noexcept
    : EmptyReply() {
    *this = ::std::move(from);
  }

  inline EmptyReply& operator=(const EmptyReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyReply& operator=(EmptyReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyReply& default_instance();

  static inline const EmptyReply* internal_default_instance() {
    return reinterpret_cast<const EmptyReply*>(
               &_EmptyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmptyReply& a, EmptyReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyReply* New() const final {
    return CreateMaybeMessage<EmptyReply>(nullptr);
  }

  EmptyReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyReply& from);
  void MergeFrom(const EmptyReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.EmptyReply";
  }
  protected:
  explicit EmptyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.EmptyReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class EchoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.EchoRequest) */ {
 public:
  inline EchoRequest() : EchoRequest(nullptr) {}
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoRequest& default_instance();

  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoRequest* New() const final {
    return CreateMaybeMessage<EchoRequest>(nullptr);
  }

  EchoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.EchoRequest";
  }
  protected:
  explicit EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.EchoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class OpenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.OpenRequest) */ {
 public:
  inline OpenRequest() : OpenRequest(nullptr) {}
  virtual ~OpenRequest();

  OpenRequest(const OpenRequest& from);
  OpenRequest(OpenRequest&& from) noexcept
    : OpenRequest() {
    *this = ::std::move(from);
  }

  inline OpenRequest& operator=(const OpenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenRequest& operator=(OpenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenRequest& default_instance();

  static inline const OpenRequest* internal_default_instance() {
    return reinterpret_cast<const OpenRequest*>(
               &_OpenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpenRequest& a, OpenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenRequest* New() const final {
    return CreateMaybeMessage<OpenRequest>(nullptr);
  }

  OpenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenRequest& from);
  void MergeFrom(const OpenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.OpenRequest";
  }
  protected:
  explicit OpenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 3,
    kFlagsFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // string path = 3;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.OpenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class OpenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.OpenResponse) */ {
 public:
  inline OpenResponse() : OpenResponse(nullptr) {}
  virtual ~OpenResponse();

  OpenResponse(const OpenResponse& from);
  OpenResponse(OpenResponse&& from) noexcept
    : OpenResponse() {
    *this = ::std::move(from);
  }

  inline OpenResponse& operator=(const OpenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenResponse& operator=(OpenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenResponse& default_instance();

  static inline const OpenResponse* internal_default_instance() {
    return reinterpret_cast<const OpenResponse*>(
               &_OpenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OpenResponse& a, OpenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenResponse* New() const final {
    return CreateMaybeMessage<OpenResponse>(nullptr);
  }

  OpenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenResponse& from);
  void MergeFrom(const OpenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.OpenResponse";
  }
  protected:
  explicit OpenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFdFieldNumber = 1,
  };
  // int32 fd = 1;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.OpenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class CloseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.CloseRequest) */ {
 public:
  inline CloseRequest() : CloseRequest(nullptr) {}
  virtual ~CloseRequest();

  CloseRequest(const CloseRequest& from);
  CloseRequest(CloseRequest&& from) noexcept
    : CloseRequest() {
    *this = ::std::move(from);
  }

  inline CloseRequest& operator=(const CloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseRequest& operator=(CloseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseRequest& default_instance();

  static inline const CloseRequest* internal_default_instance() {
    return reinterpret_cast<const CloseRequest*>(
               &_CloseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CloseRequest& a, CloseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseRequest* New() const final {
    return CreateMaybeMessage<CloseRequest>(nullptr);
  }

  CloseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseRequest& from);
  void MergeFrom(const CloseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.CloseRequest";
  }
  protected:
  explicit CloseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
  };
  // int32 handle = 1;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.CloseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class CloseResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.CloseResponse) */ {
 public:
  inline CloseResponse() : CloseResponse(nullptr) {}
  virtual ~CloseResponse();

  CloseResponse(const CloseResponse& from);
  CloseResponse(CloseResponse&& from) noexcept
    : CloseResponse() {
    *this = ::std::move(from);
  }

  inline CloseResponse& operator=(const CloseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseResponse& operator=(CloseResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseResponse& default_instance();

  static inline const CloseResponse* internal_default_instance() {
    return reinterpret_cast<const CloseResponse*>(
               &_CloseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CloseResponse& a, CloseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseResponse* New() const final {
    return CreateMaybeMessage<CloseResponse>(nullptr);
  }

  CloseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseResponse& from);
  void MergeFrom(const CloseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.CloseResponse";
  }
  protected:
  explicit CloseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.CloseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class SeekRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.SeekRequest) */ {
 public:
  inline SeekRequest() : SeekRequest(nullptr) {}
  virtual ~SeekRequest();

  SeekRequest(const SeekRequest& from);
  SeekRequest(SeekRequest&& from) noexcept
    : SeekRequest() {
    *this = ::std::move(from);
  }

  inline SeekRequest& operator=(const SeekRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekRequest& operator=(SeekRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeekRequest& default_instance();

  static inline const SeekRequest* internal_default_instance() {
    return reinterpret_cast<const SeekRequest*>(
               &_SeekRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SeekRequest& a, SeekRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeekRequest* New() const final {
    return CreateMaybeMessage<SeekRequest>(nullptr);
  }

  SeekRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeekRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeekRequest& from);
  void MergeFrom(const SeekRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.SeekRequest";
  }
  protected:
  explicit SeekRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kHandleFieldNumber = 1,
    kWhenceFieldNumber = 3,
  };
  // int64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 handle = 1;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 whence = 3;
  void clear_whence();
  ::PROTOBUF_NAMESPACE_ID::int32 whence() const;
  void set_whence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_whence() const;
  void _internal_set_whence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.SeekRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  ::PROTOBUF_NAMESPACE_ID::int32 whence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class SeekResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.SeekResponse) */ {
 public:
  inline SeekResponse() : SeekResponse(nullptr) {}
  virtual ~SeekResponse();

  SeekResponse(const SeekResponse& from);
  SeekResponse(SeekResponse&& from) noexcept
    : SeekResponse() {
    *this = ::std::move(from);
  }

  inline SeekResponse& operator=(const SeekResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekResponse& operator=(SeekResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeekResponse& default_instance();

  static inline const SeekResponse* internal_default_instance() {
    return reinterpret_cast<const SeekResponse*>(
               &_SeekResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SeekResponse& a, SeekResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeekResponse* New() const final {
    return CreateMaybeMessage<SeekResponse>(nullptr);
  }

  SeekResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeekResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeekResponse& from);
  void MergeFrom(const SeekResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.SeekResponse";
  }
  protected:
  explicit SeekResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.SeekResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class ReadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.ReadRequest) */ {
 public:
  inline ReadRequest() : ReadRequest(nullptr) {}
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);
  ReadRequest(ReadRequest&& from) noexcept
    : ReadRequest() {
    *this = ::std::move(from);
  }

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRequest& operator=(ReadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRequest& default_instance();

  static inline const ReadRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRequest*>(
               &_ReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadRequest& a, ReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const final {
    return CreateMaybeMessage<ReadRequest>(nullptr);
  }

  ReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.ReadRequest";
  }
  protected:
  explicit ReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kHandleFieldNumber = 1,
  };
  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 handle = 1;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.ReadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class ReadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.ReadResponse) */ {
 public:
  inline ReadResponse() : ReadResponse(nullptr) {}
  virtual ~ReadResponse();

  ReadResponse(const ReadResponse& from);
  ReadResponse(ReadResponse&& from) noexcept
    : ReadResponse() {
    *this = ::std::move(from);
  }

  inline ReadResponse& operator=(const ReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResponse& operator=(ReadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResponse& default_instance();

  static inline const ReadResponse* internal_default_instance() {
    return reinterpret_cast<const ReadResponse*>(
               &_ReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadResponse& a, ReadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResponse* New() const final {
    return CreateMaybeMessage<ReadResponse>(nullptr);
  }

  ReadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResponse& from);
  void MergeFrom(const ReadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.ReadResponse";
  }
  protected:
  explicit ReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.ReadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class WriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.WriteRequest) */ {
 public:
  inline WriteRequest() : WriteRequest(nullptr) {}
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteRequest& default_instance();

  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const final {
    return CreateMaybeMessage<WriteRequest>(nullptr);
  }

  WriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.WriteRequest";
  }
  protected:
  explicit WriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kHandleFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 handle = 1;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.WriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class WriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.WriteResponse) */ {
 public:
  inline WriteResponse() : WriteResponse(nullptr) {}
  virtual ~WriteResponse();

  WriteResponse(const WriteResponse& from);
  WriteResponse(WriteResponse&& from) noexcept
    : WriteResponse() {
    *this = ::std::move(from);
  }

  inline WriteResponse& operator=(const WriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteResponse& operator=(WriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteResponse& default_instance();

  static inline const WriteResponse* internal_default_instance() {
    return reinterpret_cast<const WriteResponse*>(
               &_WriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(WriteResponse& a, WriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteResponse* New() const final {
    return CreateMaybeMessage<WriteResponse>(nullptr);
  }

  WriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteResponse& from);
  void MergeFrom(const WriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.WriteResponse";
  }
  protected:
  explicit WriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.WriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class ListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.ListRequest) */ {
 public:
  inline ListRequest() : ListRequest(nullptr) {}
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRequest& default_instance();

  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRequest* New() const final {
    return CreateMaybeMessage<ListRequest>(nullptr);
  }

  ListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.ListRequest";
  }
  protected:
  explicit ListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.ListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class ListEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.ListEntry) */ {
 public:
  inline ListEntry() : ListEntry(nullptr) {}
  virtual ~ListEntry();

  ListEntry(const ListEntry& from);
  ListEntry(ListEntry&& from) noexcept
    : ListEntry() {
    *this = ::std::move(from);
  }

  inline ListEntry& operator=(const ListEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEntry& operator=(ListEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListEntry& default_instance();

  static inline const ListEntry* internal_default_instance() {
    return reinterpret_cast<const ListEntry*>(
               &_ListEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListEntry& a, ListEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListEntry* New() const final {
    return CreateMaybeMessage<ListEntry>(nullptr);
  }

  ListEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListEntry& from);
  void MergeFrom(const ListEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.ListEntry";
  }
  protected:
  explicit ListEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kOffsetFieldNumber = 2,
    kInodeFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 inode = 1;
  void clear_inode();
  ::PROTOBUF_NAMESPACE_ID::int32 inode() const;
  void set_inode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inode() const;
  void _internal_set_inode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Mira.Rpc.FileManager.ListTypes type = 3;
  void clear_type();
  ::Mira::Rpc::FileManager::ListTypes type() const;
  void set_type(::Mira::Rpc::FileManager::ListTypes value);
  private:
  ::Mira::Rpc::FileManager::ListTypes _internal_type() const;
  void _internal_set_type(::Mira::Rpc::FileManager::ListTypes value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.ListEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 inode_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class ListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.ListResponse) */ {
 public:
  inline ListResponse() : ListResponse(nullptr) {}
  virtual ~ListResponse();

  ListResponse(const ListResponse& from);
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListResponse& default_instance();

  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListResponse* New() const final {
    return CreateMaybeMessage<ListResponse>(nullptr);
  }

  ListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListResponse& from);
  void MergeFrom(const ListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.ListResponse";
  }
  protected:
  explicit ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .Mira.Rpc.FileManager.ListEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::Mira::Rpc::FileManager::ListEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mira::Rpc::FileManager::ListEntry >*
      mutable_entries();
  private:
  const ::Mira::Rpc::FileManager::ListEntry& _internal_entries(int index) const;
  ::Mira::Rpc::FileManager::ListEntry* _internal_add_entries();
  public:
  const ::Mira::Rpc::FileManager::ListEntry& entries(int index) const;
  ::Mira::Rpc::FileManager::ListEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mira::Rpc::FileManager::ListEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.ListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mira::Rpc::FileManager::ListEntry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class StatRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.StatRequest) */ {
 public:
  inline StatRequest() : StatRequest(nullptr) {}
  virtual ~StatRequest();

  StatRequest(const StatRequest& from);
  StatRequest(StatRequest&& from) noexcept
    : StatRequest() {
    *this = ::std::move(from);
  }

  inline StatRequest& operator=(const StatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatRequest& operator=(StatRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatRequest& default_instance();

  static inline const StatRequest* internal_default_instance() {
    return reinterpret_cast<const StatRequest*>(
               &_StatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StatRequest& a, StatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatRequest* New() const final {
    return CreateMaybeMessage<StatRequest>(nullptr);
  }

  StatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatRequest& from);
  void MergeFrom(const StatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.StatRequest";
  }
  protected:
  explicit StatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kHandleFieldNumber = 1,
  };
  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 handle = 1;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.StatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class Time PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.Time) */ {
 public:
  inline Time() : Time(nullptr) {}
  virtual ~Time();

  Time(const Time& from);
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time& operator=(Time&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Time& default_instance();

  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }
  inline void Swap(Time* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Time* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(nullptr);
  }

  Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.Time";
  }
  protected:
  explicit Time(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosecondsFieldNumber = 2,
  };
  // int64 seconds = 1;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 nanoseconds = 2;
  void clear_nanoseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 nanoseconds() const;
  void set_nanoseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nanoseconds() const;
  void _internal_set_nanoseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.Time)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 nanoseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class StatResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.StatResponse) */ {
 public:
  inline StatResponse() : StatResponse(nullptr) {}
  virtual ~StatResponse();

  StatResponse(const StatResponse& from);
  StatResponse(StatResponse&& from) noexcept
    : StatResponse() {
    *this = ::std::move(from);
  }

  inline StatResponse& operator=(const StatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatResponse& operator=(StatResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatResponse& default_instance();

  static inline const StatResponse* internal_default_instance() {
    return reinterpret_cast<const StatResponse*>(
               &_StatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StatResponse& a, StatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatResponse* New() const final {
    return CreateMaybeMessage<StatResponse>(nullptr);
  }

  StatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatResponse& from);
  void MergeFrom(const StatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.StatResponse";
  }
  protected:
  explicit StatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTimeFieldNumber = 11,
    kModTimeFieldNumber = 12,
    kStatusTimeFieldNumber = 13,
    kDeviceFieldNumber = 1,
    kInodeFieldNumber = 2,
    kProtectionFieldNumber = 3,
    kNumHardLinksFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kGroupIdFieldNumber = 6,
    kSizeFieldNumber = 8,
    kDeviceIdFieldNumber = 7,
    kBlocksFieldNumber = 10,
    kBlockSizeFieldNumber = 9,
  };
  // .Mira.Rpc.FileManager.Time access_time = 11;
  bool has_access_time() const;
  private:
  bool _internal_has_access_time() const;
  public:
  void clear_access_time();
  const ::Mira::Rpc::FileManager::Time& access_time() const;
  ::Mira::Rpc::FileManager::Time* release_access_time();
  ::Mira::Rpc::FileManager::Time* mutable_access_time();
  void set_allocated_access_time(::Mira::Rpc::FileManager::Time* access_time);
  private:
  const ::Mira::Rpc::FileManager::Time& _internal_access_time() const;
  ::Mira::Rpc::FileManager::Time* _internal_mutable_access_time();
  public:
  void unsafe_arena_set_allocated_access_time(
      ::Mira::Rpc::FileManager::Time* access_time);
  ::Mira::Rpc::FileManager::Time* unsafe_arena_release_access_time();

  // .Mira.Rpc.FileManager.Time mod_time = 12;
  bool has_mod_time() const;
  private:
  bool _internal_has_mod_time() const;
  public:
  void clear_mod_time();
  const ::Mira::Rpc::FileManager::Time& mod_time() const;
  ::Mira::Rpc::FileManager::Time* release_mod_time();
  ::Mira::Rpc::FileManager::Time* mutable_mod_time();
  void set_allocated_mod_time(::Mira::Rpc::FileManager::Time* mod_time);
  private:
  const ::Mira::Rpc::FileManager::Time& _internal_mod_time() const;
  ::Mira::Rpc::FileManager::Time* _internal_mutable_mod_time();
  public:
  void unsafe_arena_set_allocated_mod_time(
      ::Mira::Rpc::FileManager::Time* mod_time);
  ::Mira::Rpc::FileManager::Time* unsafe_arena_release_mod_time();

  // .Mira.Rpc.FileManager.Time status_time = 13;
  bool has_status_time() const;
  private:
  bool _internal_has_status_time() const;
  public:
  void clear_status_time();
  const ::Mira::Rpc::FileManager::Time& status_time() const;
  ::Mira::Rpc::FileManager::Time* release_status_time();
  ::Mira::Rpc::FileManager::Time* mutable_status_time();
  void set_allocated_status_time(::Mira::Rpc::FileManager::Time* status_time);
  private:
  const ::Mira::Rpc::FileManager::Time& _internal_status_time() const;
  ::Mira::Rpc::FileManager::Time* _internal_mutable_status_time();
  public:
  void unsafe_arena_set_allocated_status_time(
      ::Mira::Rpc::FileManager::Time* status_time);
  ::Mira::Rpc::FileManager::Time* unsafe_arena_release_status_time();

  // int32 device = 1;
  void clear_device();
  ::PROTOBUF_NAMESPACE_ID::int32 device() const;
  void set_device(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device() const;
  void _internal_set_device(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inode = 2;
  void clear_inode();
  ::PROTOBUF_NAMESPACE_ID::int32 inode() const;
  void set_inode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inode() const;
  void _internal_set_inode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 protection = 3;
  void clear_protection();
  ::PROTOBUF_NAMESPACE_ID::int32 protection() const;
  void set_protection(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protection() const;
  void _internal_set_protection(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_hard_links = 4;
  void clear_num_hard_links();
  ::PROTOBUF_NAMESPACE_ID::int32 num_hard_links() const;
  void set_num_hard_links(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_hard_links() const;
  void _internal_set_num_hard_links(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_id = 5;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 group_id = 6;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 size = 8;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 device_id = 7;
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::int32 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device_id() const;
  void _internal_set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 blocks = 10;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocks() const;
  void _internal_set_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 block_size = 9;
  void clear_block_size();
  ::PROTOBUF_NAMESPACE_ID::int64 block_size() const;
  void set_block_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_block_size() const;
  void _internal_set_block_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.StatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Mira::Rpc::FileManager::Time* access_time_;
  ::Mira::Rpc::FileManager::Time* mod_time_;
  ::Mira::Rpc::FileManager::Time* status_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_;
  ::PROTOBUF_NAMESPACE_ID::int32 inode_;
  ::PROTOBUF_NAMESPACE_ID::int32 protection_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_hard_links_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocks_;
  ::PROTOBUF_NAMESPACE_ID::int64 block_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class MkdirRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.MkdirRequest) */ {
 public:
  inline MkdirRequest() : MkdirRequest(nullptr) {}
  virtual ~MkdirRequest();

  MkdirRequest(const MkdirRequest& from);
  MkdirRequest(MkdirRequest&& from) noexcept
    : MkdirRequest() {
    *this = ::std::move(from);
  }

  inline MkdirRequest& operator=(const MkdirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MkdirRequest& operator=(MkdirRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MkdirRequest& default_instance();

  static inline const MkdirRequest* internal_default_instance() {
    return reinterpret_cast<const MkdirRequest*>(
               &_MkdirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MkdirRequest& a, MkdirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MkdirRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MkdirRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MkdirRequest* New() const final {
    return CreateMaybeMessage<MkdirRequest>(nullptr);
  }

  MkdirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MkdirRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MkdirRequest& from);
  void MergeFrom(const MkdirRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MkdirRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.MkdirRequest";
  }
  protected:
  explicit MkdirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kModeFieldNumber = 1,
  };
  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 mode = 1;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.MkdirRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class MkdirResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.MkdirResponse) */ {
 public:
  inline MkdirResponse() : MkdirResponse(nullptr) {}
  virtual ~MkdirResponse();

  MkdirResponse(const MkdirResponse& from);
  MkdirResponse(MkdirResponse&& from) noexcept
    : MkdirResponse() {
    *this = ::std::move(from);
  }

  inline MkdirResponse& operator=(const MkdirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MkdirResponse& operator=(MkdirResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MkdirResponse& default_instance();

  static inline const MkdirResponse* internal_default_instance() {
    return reinterpret_cast<const MkdirResponse*>(
               &_MkdirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MkdirResponse& a, MkdirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MkdirResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MkdirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MkdirResponse* New() const final {
    return CreateMaybeMessage<MkdirResponse>(nullptr);
  }

  MkdirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MkdirResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MkdirResponse& from);
  void MergeFrom(const MkdirResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MkdirResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.MkdirResponse";
  }
  protected:
  explicit MkdirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.MkdirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class RmdirRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.RmdirRequest) */ {
 public:
  inline RmdirRequest() : RmdirRequest(nullptr) {}
  virtual ~RmdirRequest();

  RmdirRequest(const RmdirRequest& from);
  RmdirRequest(RmdirRequest&& from) noexcept
    : RmdirRequest() {
    *this = ::std::move(from);
  }

  inline RmdirRequest& operator=(const RmdirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RmdirRequest& operator=(RmdirRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RmdirRequest& default_instance();

  static inline const RmdirRequest* internal_default_instance() {
    return reinterpret_cast<const RmdirRequest*>(
               &_RmdirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RmdirRequest& a, RmdirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RmdirRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RmdirRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RmdirRequest* New() const final {
    return CreateMaybeMessage<RmdirRequest>(nullptr);
  }

  RmdirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RmdirRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RmdirRequest& from);
  void MergeFrom(const RmdirRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RmdirRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.RmdirRequest";
  }
  protected:
  explicit RmdirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.RmdirRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class RmdirResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.RmdirResponse) */ {
 public:
  inline RmdirResponse() : RmdirResponse(nullptr) {}
  virtual ~RmdirResponse();

  RmdirResponse(const RmdirResponse& from);
  RmdirResponse(RmdirResponse&& from) noexcept
    : RmdirResponse() {
    *this = ::std::move(from);
  }

  inline RmdirResponse& operator=(const RmdirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RmdirResponse& operator=(RmdirResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RmdirResponse& default_instance();

  static inline const RmdirResponse* internal_default_instance() {
    return reinterpret_cast<const RmdirResponse*>(
               &_RmdirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RmdirResponse& a, RmdirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RmdirResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RmdirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RmdirResponse* New() const final {
    return CreateMaybeMessage<RmdirResponse>(nullptr);
  }

  RmdirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RmdirResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RmdirResponse& from);
  void MergeFrom(const RmdirResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RmdirResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.RmdirResponse";
  }
  protected:
  explicit RmdirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.RmdirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class UnlinkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.UnlinkRequest) */ {
 public:
  inline UnlinkRequest() : UnlinkRequest(nullptr) {}
  virtual ~UnlinkRequest();

  UnlinkRequest(const UnlinkRequest& from);
  UnlinkRequest(UnlinkRequest&& from) noexcept
    : UnlinkRequest() {
    *this = ::std::move(from);
  }

  inline UnlinkRequest& operator=(const UnlinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnlinkRequest& operator=(UnlinkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnlinkRequest& default_instance();

  static inline const UnlinkRequest* internal_default_instance() {
    return reinterpret_cast<const UnlinkRequest*>(
               &_UnlinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UnlinkRequest& a, UnlinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnlinkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnlinkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnlinkRequest* New() const final {
    return CreateMaybeMessage<UnlinkRequest>(nullptr);
  }

  UnlinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnlinkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnlinkRequest& from);
  void MergeFrom(const UnlinkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnlinkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.UnlinkRequest";
  }
  protected:
  explicit UnlinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.UnlinkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// -------------------------------------------------------------------

class UnlinkResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mira.Rpc.FileManager.UnlinkResponse) */ {
 public:
  inline UnlinkResponse() : UnlinkResponse(nullptr) {}
  virtual ~UnlinkResponse();

  UnlinkResponse(const UnlinkResponse& from);
  UnlinkResponse(UnlinkResponse&& from) noexcept
    : UnlinkResponse() {
    *this = ::std::move(from);
  }

  inline UnlinkResponse& operator=(const UnlinkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnlinkResponse& operator=(UnlinkResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnlinkResponse& default_instance();

  static inline const UnlinkResponse* internal_default_instance() {
    return reinterpret_cast<const UnlinkResponse*>(
               &_UnlinkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UnlinkResponse& a, UnlinkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnlinkResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnlinkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnlinkResponse* New() const final {
    return CreateMaybeMessage<UnlinkResponse>(nullptr);
  }

  UnlinkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnlinkResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnlinkResponse& from);
  void MergeFrom(const UnlinkResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnlinkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mira.Rpc.FileManager.UnlinkResponse";
  }
  protected:
  explicit UnlinkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileManager_2eproto);
    return ::descriptor_table_FileManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mira.Rpc.FileManager.UnlinkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileManager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmptyReply

// -------------------------------------------------------------------

// EchoRequest

// string message = 1;
inline void EchoRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& EchoRequest::message() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.EchoRequest.message)
  return _internal_message();
}
inline void EchoRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.EchoRequest.message)
}
inline std::string* EchoRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.EchoRequest.message)
  return _internal_mutable_message();
}
inline const std::string& EchoRequest::_internal_message() const {
  return message_.Get();
}
inline void EchoRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EchoRequest::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.FileManager.EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.FileManager.EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.FileManager.EchoRequest.message)
}
inline std::string* EchoRequest::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EchoRequest::release_message() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.EchoRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.EchoRequest.message)
}

// -------------------------------------------------------------------

// OpenRequest

// int32 flags = 1;
inline void OpenRequest::clear_flags() {
  flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRequest::flags() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.OpenRequest.flags)
  return _internal_flags();
}
inline void OpenRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flags_ = value;
}
inline void OpenRequest::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.OpenRequest.flags)
}

// int32 mode = 2;
inline void OpenRequest::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRequest::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenRequest::mode() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.OpenRequest.mode)
  return _internal_mode();
}
inline void OpenRequest::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void OpenRequest::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.OpenRequest.mode)
}

// string path = 3;
inline void OpenRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& OpenRequest::path() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.OpenRequest.path)
  return _internal_path();
}
inline void OpenRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.OpenRequest.path)
}
inline std::string* OpenRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.OpenRequest.path)
  return _internal_mutable_path();
}
inline const std::string& OpenRequest::_internal_path() const {
  return path_.Get();
}
inline void OpenRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpenRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.FileManager.OpenRequest.path)
}
inline void OpenRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.FileManager.OpenRequest.path)
}
inline void OpenRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.FileManager.OpenRequest.path)
}
inline std::string* OpenRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpenRequest::release_path() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.OpenRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpenRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.OpenRequest.path)
}

// -------------------------------------------------------------------

// OpenResponse

// int32 fd = 1;
inline void OpenResponse::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenResponse::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenResponse::fd() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.OpenResponse.fd)
  return _internal_fd();
}
inline void OpenResponse::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void OpenResponse::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.OpenResponse.fd)
}

// -------------------------------------------------------------------

// CloseRequest

// int32 handle = 1;
inline void CloseRequest::clear_handle() {
  handle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseRequest::_internal_handle() const {
  return handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseRequest::handle() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.CloseRequest.handle)
  return _internal_handle();
}
inline void CloseRequest::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  handle_ = value;
}
inline void CloseRequest::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.CloseRequest.handle)
}

// -------------------------------------------------------------------

// CloseResponse

// -------------------------------------------------------------------

// SeekRequest

// int32 handle = 1;
inline void SeekRequest::clear_handle() {
  handle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeekRequest::_internal_handle() const {
  return handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeekRequest::handle() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.SeekRequest.handle)
  return _internal_handle();
}
inline void SeekRequest::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  handle_ = value;
}
inline void SeekRequest::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.SeekRequest.handle)
}

// int64 offset = 2;
inline void SeekRequest::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SeekRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SeekRequest::offset() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.SeekRequest.offset)
  return _internal_offset();
}
inline void SeekRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void SeekRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.SeekRequest.offset)
}

// int32 whence = 3;
inline void SeekRequest::clear_whence() {
  whence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeekRequest::_internal_whence() const {
  return whence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeekRequest::whence() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.SeekRequest.whence)
  return _internal_whence();
}
inline void SeekRequest::_internal_set_whence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  whence_ = value;
}
inline void SeekRequest::set_whence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_whence(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.SeekRequest.whence)
}

// -------------------------------------------------------------------

// SeekResponse

// -------------------------------------------------------------------

// ReadRequest

// int32 handle = 1;
inline void ReadRequest::clear_handle() {
  handle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadRequest::_internal_handle() const {
  return handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadRequest::handle() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.ReadRequest.handle)
  return _internal_handle();
}
inline void ReadRequest::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  handle_ = value;
}
inline void ReadRequest::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.ReadRequest.handle)
}

// uint64 size = 2;
inline void ReadRequest::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::size() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.ReadRequest.size)
  return _internal_size();
}
inline void ReadRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void ReadRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.ReadRequest.size)
}

// -------------------------------------------------------------------

// ReadResponse

// bytes data = 1;
inline void ReadResponse::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ReadResponse::data() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.ReadResponse.data)
  return _internal_data();
}
inline void ReadResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.ReadResponse.data)
}
inline std::string* ReadResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.ReadResponse.data)
  return _internal_mutable_data();
}
inline const std::string& ReadResponse::_internal_data() const {
  return data_.Get();
}
inline void ReadResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadResponse::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.FileManager.ReadResponse.data)
}
inline void ReadResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.FileManager.ReadResponse.data)
}
inline void ReadResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.FileManager.ReadResponse.data)
}
inline std::string* ReadResponse::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadResponse::release_data() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.ReadResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.ReadResponse.data)
}

// -------------------------------------------------------------------

// WriteRequest

// int32 handle = 1;
inline void WriteRequest::clear_handle() {
  handle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteRequest::_internal_handle() const {
  return handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteRequest::handle() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.WriteRequest.handle)
  return _internal_handle();
}
inline void WriteRequest::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  handle_ = value;
}
inline void WriteRequest::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.WriteRequest.handle)
}

// bytes data = 2;
inline void WriteRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& WriteRequest::data() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.WriteRequest.data)
  return _internal_data();
}
inline void WriteRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.WriteRequest.data)
}
inline std::string* WriteRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.WriteRequest.data)
  return _internal_mutable_data();
}
inline const std::string& WriteRequest::_internal_data() const {
  return data_.Get();
}
inline void WriteRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteRequest::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.FileManager.WriteRequest.data)
}
inline void WriteRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.FileManager.WriteRequest.data)
}
inline void WriteRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.FileManager.WriteRequest.data)
}
inline std::string* WriteRequest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteRequest::release_data() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.WriteRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.WriteRequest.data)
}

// -------------------------------------------------------------------

// WriteResponse

// -------------------------------------------------------------------

// ListRequest

// string path = 1;
inline void ListRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& ListRequest::path() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.ListRequest.path)
  return _internal_path();
}
inline void ListRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.ListRequest.path)
}
inline std::string* ListRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.ListRequest.path)
  return _internal_mutable_path();
}
inline const std::string& ListRequest::_internal_path() const {
  return path_.Get();
}
inline void ListRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.FileManager.ListRequest.path)
}
inline void ListRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.FileManager.ListRequest.path)
}
inline void ListRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.FileManager.ListRequest.path)
}
inline std::string* ListRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListRequest::release_path() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.ListRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.ListRequest.path)
}

// -------------------------------------------------------------------

// ListEntry

// int32 inode = 1;
inline void ListEntry::clear_inode() {
  inode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListEntry::_internal_inode() const {
  return inode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListEntry::inode() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.ListEntry.inode)
  return _internal_inode();
}
inline void ListEntry::_internal_set_inode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inode_ = value;
}
inline void ListEntry::set_inode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inode(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.ListEntry.inode)
}

// int64 offset = 2;
inline void ListEntry::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListEntry::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListEntry::offset() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.ListEntry.offset)
  return _internal_offset();
}
inline void ListEntry::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void ListEntry::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.ListEntry.offset)
}

// .Mira.Rpc.FileManager.ListTypes type = 3;
inline void ListEntry::clear_type() {
  type_ = 0;
}
inline ::Mira::Rpc::FileManager::ListTypes ListEntry::_internal_type() const {
  return static_cast< ::Mira::Rpc::FileManager::ListTypes >(type_);
}
inline ::Mira::Rpc::FileManager::ListTypes ListEntry::type() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.ListEntry.type)
  return _internal_type();
}
inline void ListEntry::_internal_set_type(::Mira::Rpc::FileManager::ListTypes value) {
  
  type_ = value;
}
inline void ListEntry::set_type(::Mira::Rpc::FileManager::ListTypes value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.ListEntry.type)
}

// string name = 4;
inline void ListEntry::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListEntry::name() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.ListEntry.name)
  return _internal_name();
}
inline void ListEntry::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.ListEntry.name)
}
inline std::string* ListEntry::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.ListEntry.name)
  return _internal_mutable_name();
}
inline const std::string& ListEntry::_internal_name() const {
  return name_.Get();
}
inline void ListEntry::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListEntry::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.FileManager.ListEntry.name)
}
inline void ListEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.FileManager.ListEntry.name)
}
inline void ListEntry::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.FileManager.ListEntry.name)
}
inline std::string* ListEntry::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListEntry::release_name() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.ListEntry.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.ListEntry.name)
}

// -------------------------------------------------------------------

// ListResponse

// repeated .Mira.Rpc.FileManager.ListEntry entries = 1;
inline int ListResponse::_internal_entries_size() const {
  return entries_.size();
}
inline int ListResponse::entries_size() const {
  return _internal_entries_size();
}
inline void ListResponse::clear_entries() {
  entries_.Clear();
}
inline ::Mira::Rpc::FileManager::ListEntry* ListResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.ListResponse.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mira::Rpc::FileManager::ListEntry >*
ListResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Mira.Rpc.FileManager.ListResponse.entries)
  return &entries_;
}
inline const ::Mira::Rpc::FileManager::ListEntry& ListResponse::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::Mira::Rpc::FileManager::ListEntry& ListResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.ListResponse.entries)
  return _internal_entries(index);
}
inline ::Mira::Rpc::FileManager::ListEntry* ListResponse::_internal_add_entries() {
  return entries_.Add();
}
inline ::Mira::Rpc::FileManager::ListEntry* ListResponse::add_entries() {
  // @@protoc_insertion_point(field_add:Mira.Rpc.FileManager.ListResponse.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mira::Rpc::FileManager::ListEntry >&
ListResponse::entries() const {
  // @@protoc_insertion_point(field_list:Mira.Rpc.FileManager.ListResponse.entries)
  return entries_;
}

// -------------------------------------------------------------------

// StatRequest

// int32 handle = 1;
inline void StatRequest::clear_handle() {
  handle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatRequest::_internal_handle() const {
  return handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatRequest::handle() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatRequest.handle)
  return _internal_handle();
}
inline void StatRequest::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  handle_ = value;
}
inline void StatRequest::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatRequest.handle)
}

// string path = 2;
inline void StatRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& StatRequest::path() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatRequest.path)
  return _internal_path();
}
inline void StatRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatRequest.path)
}
inline std::string* StatRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.StatRequest.path)
  return _internal_mutable_path();
}
inline const std::string& StatRequest::_internal_path() const {
  return path_.Get();
}
inline void StatRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StatRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.FileManager.StatRequest.path)
}
inline void StatRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.FileManager.StatRequest.path)
}
inline void StatRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.FileManager.StatRequest.path)
}
inline std::string* StatRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StatRequest::release_path() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.StatRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.StatRequest.path)
}

// -------------------------------------------------------------------

// Time

// int64 seconds = 1;
inline void Time::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Time::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Time::seconds() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.Time.seconds)
  return _internal_seconds();
}
inline void Time::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seconds_ = value;
}
inline void Time::set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.Time.seconds)
}

// int32 nanoseconds = 2;
inline void Time::clear_nanoseconds() {
  nanoseconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Time::_internal_nanoseconds() const {
  return nanoseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Time::nanoseconds() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.Time.nanoseconds)
  return _internal_nanoseconds();
}
inline void Time::_internal_set_nanoseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nanoseconds_ = value;
}
inline void Time::set_nanoseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nanoseconds(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.Time.nanoseconds)
}

// -------------------------------------------------------------------

// StatResponse

// int32 device = 1;
inline void StatResponse::clear_device() {
  device_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::_internal_device() const {
  return device_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::device() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.device)
  return _internal_device();
}
inline void StatResponse::_internal_set_device(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  device_ = value;
}
inline void StatResponse::set_device(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatResponse.device)
}

// int32 inode = 2;
inline void StatResponse::clear_inode() {
  inode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::_internal_inode() const {
  return inode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::inode() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.inode)
  return _internal_inode();
}
inline void StatResponse::_internal_set_inode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inode_ = value;
}
inline void StatResponse::set_inode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inode(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatResponse.inode)
}

// int32 protection = 3;
inline void StatResponse::clear_protection() {
  protection_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::_internal_protection() const {
  return protection_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::protection() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.protection)
  return _internal_protection();
}
inline void StatResponse::_internal_set_protection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  protection_ = value;
}
inline void StatResponse::set_protection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protection(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatResponse.protection)
}

// int32 num_hard_links = 4;
inline void StatResponse::clear_num_hard_links() {
  num_hard_links_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::_internal_num_hard_links() const {
  return num_hard_links_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::num_hard_links() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.num_hard_links)
  return _internal_num_hard_links();
}
inline void StatResponse::_internal_set_num_hard_links(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_hard_links_ = value;
}
inline void StatResponse::set_num_hard_links(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_hard_links(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatResponse.num_hard_links)
}

// int32 user_id = 5;
inline void StatResponse::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::user_id() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.user_id)
  return _internal_user_id();
}
inline void StatResponse::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void StatResponse::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatResponse.user_id)
}

// int32 group_id = 6;
inline void StatResponse::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::group_id() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.group_id)
  return _internal_group_id();
}
inline void StatResponse::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void StatResponse::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatResponse.group_id)
}

// int32 device_id = 7;
inline void StatResponse::clear_device_id() {
  device_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::_internal_device_id() const {
  return device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::device_id() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.device_id)
  return _internal_device_id();
}
inline void StatResponse::_internal_set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  device_id_ = value;
}
inline void StatResponse::set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatResponse.device_id)
}

// int64 size = 8;
inline void StatResponse::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatResponse::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatResponse::size() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.size)
  return _internal_size();
}
inline void StatResponse::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void StatResponse::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatResponse.size)
}

// int64 block_size = 9;
inline void StatResponse::clear_block_size() {
  block_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatResponse::_internal_block_size() const {
  return block_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatResponse::block_size() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.block_size)
  return _internal_block_size();
}
inline void StatResponse::_internal_set_block_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  block_size_ = value;
}
inline void StatResponse::set_block_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatResponse.block_size)
}

// int32 blocks = 10;
inline void StatResponse::clear_blocks() {
  blocks_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::_internal_blocks() const {
  return blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatResponse::blocks() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.blocks)
  return _internal_blocks();
}
inline void StatResponse::_internal_set_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blocks_ = value;
}
inline void StatResponse::set_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.StatResponse.blocks)
}

// .Mira.Rpc.FileManager.Time access_time = 11;
inline bool StatResponse::_internal_has_access_time() const {
  return this != internal_default_instance() && access_time_ != nullptr;
}
inline bool StatResponse::has_access_time() const {
  return _internal_has_access_time();
}
inline void StatResponse::clear_access_time() {
  if (GetArena() == nullptr && access_time_ != nullptr) {
    delete access_time_;
  }
  access_time_ = nullptr;
}
inline const ::Mira::Rpc::FileManager::Time& StatResponse::_internal_access_time() const {
  const ::Mira::Rpc::FileManager::Time* p = access_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::Mira::Rpc::FileManager::Time&>(
      ::Mira::Rpc::FileManager::_Time_default_instance_);
}
inline const ::Mira::Rpc::FileManager::Time& StatResponse::access_time() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.access_time)
  return _internal_access_time();
}
inline void StatResponse::unsafe_arena_set_allocated_access_time(
    ::Mira::Rpc::FileManager::Time* access_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_time_);
  }
  access_time_ = access_time;
  if (access_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Mira.Rpc.FileManager.StatResponse.access_time)
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::release_access_time() {
  
  ::Mira::Rpc::FileManager::Time* temp = access_time_;
  access_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::unsafe_arena_release_access_time() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.StatResponse.access_time)
  
  ::Mira::Rpc::FileManager::Time* temp = access_time_;
  access_time_ = nullptr;
  return temp;
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::_internal_mutable_access_time() {
  
  if (access_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mira::Rpc::FileManager::Time>(GetArena());
    access_time_ = p;
  }
  return access_time_;
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::mutable_access_time() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.StatResponse.access_time)
  return _internal_mutable_access_time();
}
inline void StatResponse::set_allocated_access_time(::Mira::Rpc::FileManager::Time* access_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete access_time_;
  }
  if (access_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(access_time);
    if (message_arena != submessage_arena) {
      access_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access_time, submessage_arena);
    }
    
  } else {
    
  }
  access_time_ = access_time;
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.StatResponse.access_time)
}

// .Mira.Rpc.FileManager.Time mod_time = 12;
inline bool StatResponse::_internal_has_mod_time() const {
  return this != internal_default_instance() && mod_time_ != nullptr;
}
inline bool StatResponse::has_mod_time() const {
  return _internal_has_mod_time();
}
inline void StatResponse::clear_mod_time() {
  if (GetArena() == nullptr && mod_time_ != nullptr) {
    delete mod_time_;
  }
  mod_time_ = nullptr;
}
inline const ::Mira::Rpc::FileManager::Time& StatResponse::_internal_mod_time() const {
  const ::Mira::Rpc::FileManager::Time* p = mod_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::Mira::Rpc::FileManager::Time&>(
      ::Mira::Rpc::FileManager::_Time_default_instance_);
}
inline const ::Mira::Rpc::FileManager::Time& StatResponse::mod_time() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.mod_time)
  return _internal_mod_time();
}
inline void StatResponse::unsafe_arena_set_allocated_mod_time(
    ::Mira::Rpc::FileManager::Time* mod_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mod_time_);
  }
  mod_time_ = mod_time;
  if (mod_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Mira.Rpc.FileManager.StatResponse.mod_time)
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::release_mod_time() {
  
  ::Mira::Rpc::FileManager::Time* temp = mod_time_;
  mod_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::unsafe_arena_release_mod_time() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.StatResponse.mod_time)
  
  ::Mira::Rpc::FileManager::Time* temp = mod_time_;
  mod_time_ = nullptr;
  return temp;
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::_internal_mutable_mod_time() {
  
  if (mod_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mira::Rpc::FileManager::Time>(GetArena());
    mod_time_ = p;
  }
  return mod_time_;
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::mutable_mod_time() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.StatResponse.mod_time)
  return _internal_mutable_mod_time();
}
inline void StatResponse::set_allocated_mod_time(::Mira::Rpc::FileManager::Time* mod_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mod_time_;
  }
  if (mod_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mod_time);
    if (message_arena != submessage_arena) {
      mod_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mod_time, submessage_arena);
    }
    
  } else {
    
  }
  mod_time_ = mod_time;
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.StatResponse.mod_time)
}

// .Mira.Rpc.FileManager.Time status_time = 13;
inline bool StatResponse::_internal_has_status_time() const {
  return this != internal_default_instance() && status_time_ != nullptr;
}
inline bool StatResponse::has_status_time() const {
  return _internal_has_status_time();
}
inline void StatResponse::clear_status_time() {
  if (GetArena() == nullptr && status_time_ != nullptr) {
    delete status_time_;
  }
  status_time_ = nullptr;
}
inline const ::Mira::Rpc::FileManager::Time& StatResponse::_internal_status_time() const {
  const ::Mira::Rpc::FileManager::Time* p = status_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::Mira::Rpc::FileManager::Time&>(
      ::Mira::Rpc::FileManager::_Time_default_instance_);
}
inline const ::Mira::Rpc::FileManager::Time& StatResponse::status_time() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.StatResponse.status_time)
  return _internal_status_time();
}
inline void StatResponse::unsafe_arena_set_allocated_status_time(
    ::Mira::Rpc::FileManager::Time* status_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_time_);
  }
  status_time_ = status_time;
  if (status_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Mira.Rpc.FileManager.StatResponse.status_time)
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::release_status_time() {
  
  ::Mira::Rpc::FileManager::Time* temp = status_time_;
  status_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::unsafe_arena_release_status_time() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.StatResponse.status_time)
  
  ::Mira::Rpc::FileManager::Time* temp = status_time_;
  status_time_ = nullptr;
  return temp;
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::_internal_mutable_status_time() {
  
  if (status_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mira::Rpc::FileManager::Time>(GetArena());
    status_time_ = p;
  }
  return status_time_;
}
inline ::Mira::Rpc::FileManager::Time* StatResponse::mutable_status_time() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.StatResponse.status_time)
  return _internal_mutable_status_time();
}
inline void StatResponse::set_allocated_status_time(::Mira::Rpc::FileManager::Time* status_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_time_;
  }
  if (status_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status_time);
    if (message_arena != submessage_arena) {
      status_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_time, submessage_arena);
    }
    
  } else {
    
  }
  status_time_ = status_time;
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.StatResponse.status_time)
}

// -------------------------------------------------------------------

// MkdirRequest

// int32 mode = 1;
inline void MkdirRequest::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MkdirRequest::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MkdirRequest::mode() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.MkdirRequest.mode)
  return _internal_mode();
}
inline void MkdirRequest::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void MkdirRequest::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.MkdirRequest.mode)
}

// string path = 2;
inline void MkdirRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& MkdirRequest::path() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.MkdirRequest.path)
  return _internal_path();
}
inline void MkdirRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.MkdirRequest.path)
}
inline std::string* MkdirRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.MkdirRequest.path)
  return _internal_mutable_path();
}
inline const std::string& MkdirRequest::_internal_path() const {
  return path_.Get();
}
inline void MkdirRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MkdirRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.FileManager.MkdirRequest.path)
}
inline void MkdirRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.FileManager.MkdirRequest.path)
}
inline void MkdirRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.FileManager.MkdirRequest.path)
}
inline std::string* MkdirRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MkdirRequest::release_path() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.MkdirRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MkdirRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.MkdirRequest.path)
}

// -------------------------------------------------------------------

// MkdirResponse

// -------------------------------------------------------------------

// RmdirRequest

// string path = 1;
inline void RmdirRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& RmdirRequest::path() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.RmdirRequest.path)
  return _internal_path();
}
inline void RmdirRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.RmdirRequest.path)
}
inline std::string* RmdirRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.RmdirRequest.path)
  return _internal_mutable_path();
}
inline const std::string& RmdirRequest::_internal_path() const {
  return path_.Get();
}
inline void RmdirRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RmdirRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.FileManager.RmdirRequest.path)
}
inline void RmdirRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.FileManager.RmdirRequest.path)
}
inline void RmdirRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.FileManager.RmdirRequest.path)
}
inline std::string* RmdirRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RmdirRequest::release_path() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.RmdirRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RmdirRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.RmdirRequest.path)
}

// -------------------------------------------------------------------

// RmdirResponse

// -------------------------------------------------------------------

// UnlinkRequest

// string path = 1;
inline void UnlinkRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& UnlinkRequest::path() const {
  // @@protoc_insertion_point(field_get:Mira.Rpc.FileManager.UnlinkRequest.path)
  return _internal_path();
}
inline void UnlinkRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Mira.Rpc.FileManager.UnlinkRequest.path)
}
inline std::string* UnlinkRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Mira.Rpc.FileManager.UnlinkRequest.path)
  return _internal_mutable_path();
}
inline const std::string& UnlinkRequest::_internal_path() const {
  return path_.Get();
}
inline void UnlinkRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnlinkRequest::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mira.Rpc.FileManager.UnlinkRequest.path)
}
inline void UnlinkRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Mira.Rpc.FileManager.UnlinkRequest.path)
}
inline void UnlinkRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mira.Rpc.FileManager.UnlinkRequest.path)
}
inline std::string* UnlinkRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnlinkRequest::release_path() {
  // @@protoc_insertion_point(field_release:Mira.Rpc.FileManager.UnlinkRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnlinkRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mira.Rpc.FileManager.UnlinkRequest.path)
}

// -------------------------------------------------------------------

// UnlinkResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FileManager
}  // namespace Rpc
}  // namespace Mira

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Mira::Rpc::FileManager::ListTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Mira::Rpc::FileManager::ListTypes>() {
  return ::Mira::Rpc::FileManager::ListTypes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FileManager_2eproto
